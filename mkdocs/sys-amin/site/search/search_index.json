{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TACTIC System Administrator Documentation This documentation provides instructions for installing and configuring a TACTIC server for production use. TACTIC is an ideal framework for workflow automation development: It can be used in diverse server environments including both Windows and UNIX/Linux systems It can use a number of database technologies including PostgreSQL, MySQL, SQLServer and SQLite. It can be configured to match your custom asset managements needs It is easy to maintain and scale Refer to the following sections for installation, Planning Install TACTIC Application Server Configuration Refer to the following sections for maintenance, Upgrade TACTIC Scalability Troubleshooting Maintenance To get started with using TACTIC, building workflows and defining automation, read the Quick-Start documentation.","title":"TACTIC System Administrator Documentation"},{"location":"#tactic-system-administrator-documentation","text":"This documentation provides instructions for installing and configuring a TACTIC server for production use. TACTIC is an ideal framework for workflow automation development: It can be used in diverse server environments including both Windows and UNIX/Linux systems It can use a number of database technologies including PostgreSQL, MySQL, SQLServer and SQLite. It can be configured to match your custom asset managements needs It is easy to maintain and scale Refer to the following sections for installation, Planning Install TACTIC Application Server Configuration Refer to the following sections for maintenance, Upgrade TACTIC Scalability Troubleshooting Maintenance To get started with using TACTIC, building workflows and defining automation, read the Quick-Start documentation.","title":"TACTIC System Administrator Documentation"},{"location":"active-directory/","text":"Active Directory Integration TACTIC provides the ability to easily connect to any active directory installation for both authentication and for synchronization of user data. With a set of directives in the TACTIC configuration file, it is possible to connect to Active Directory for authentication and user information. This synchronization takes place at login time. At this point, TACTIC takes the desired information for a particular user and caches it into the \"sthpw/login\" search type. Subsequent requests would normally use an issued ticket given at login time. On these requests, no further querying of active directory is needed until the ticket expires or the user signs out the application. The active directory modules make use of win32 libraries for python. These must be installed in order for the connection to active directory to function properly TACTIC Configuration There are a number of directives in the TACTIC config file that can be used to configure the active directory settings. These allow you to adjust TACTIC behavior to suit the needs of the facility. In order to turn on active directory authentication, you must change the authenticate class to the following: security ... authenticate_class tactic.active_directory.ADAuthenticate /authenticate_class ... /security The following directives can be set under the active directory category: domains - This is a \"|\" delimited list of the domains that exist in the network. If specified, a selection box for domains will be added to the login page. allow - Can be \"all\", which allows everyone to log in if authentication is approved or it can point to the name of a specific Active Directory attribute that must be set to True. If a person is denied access, the will receive the error: \"Permission denied due to insufficient Active Directory clearance\". default_groups: - Defines the default groups that a user will belong to if none is specified. Multiple groups are delimited by \"|\". default_license_type: - Determines the default license type for a user if none is specified in the Active Directory attribute \"tacticLicenceType\". Example Configurations Below is an example of a typical entry in the TACTIC config file, active_directory domains xxx|yyy|zzz /domains allow tacticEnabled /allow default_groups client /default_groups default_license_type user /default_license_type /active_directory Allow anyone to login, active_directory allow all /allow /active_directory Allow anyone to login and will be put in the \"client\" group if user has no groups specified, active_directory allow all /allow /active_directory Only allow those with the attribute tacticEnabled in Active Directory set to \"true\", active_directory allow tacticEnabled /allow /active_directory Enable users to select a domain (xxx, yyy or zzz) in the login screen active_directory allow all /allow domains xxx|yyy|zzz /domains /active_directory Synchronization Active Directory attributes use camel case notation (aaaBbbCcc), while TACTIC users lowercase with underscore separators for columns( aaa_bbb_ccc). In order to maintain consistency within the TACTIC application, a mapping of columns from active directory to TACTIC is provided. The following mappings are made by default: mail email telephoneNumber phone_number department department displayName first_name, last_name (broken up) tacticLicenceType license_type The Active Directory variable \"tacticLicenseType\" is a custom variable that indicates which type of license a particular user can occupy in TACTIC. If this attribute is missing from a users active directory profile, then they will be denied a login. This attribute can be used to determine if a particular user in active directory is allowed to login to TACTIC. The only supported license for this attribute are \"user\" and \"default\". Other license types have not yet been implemented yet. On log in, TACTIC will look at all of the groups that a user belongs to in Active Directory and match those group names to the \"ad_login_group\" column in the \"sthpw/login_group\" search type. This grouping list will synchronized at this time, removing the users from groups not specified in Active Directory and add those that are specified. This means that Active Directory is in full control of the groups that a user is part of and therefore must be managed entirely in Active Directory. For the name of the group, TACTIC only looks at the root of the path to map the group name. For example, an active directory group with the following distinguished name: memberOf: CN=supervisor,OU=Users,OU=EIS,DC=domain,DC=us,DC=xxxx,DC=com TACTIC will need only \"supervisor\" to be entered in the \"ad_login_group\" column. If on logging in, the number of users exceeds the number of users in the license, then that user will be denied access and an entry in the \"sthpw/login\" search type will not be made. However, all other users currently registered can continue to work normally.","title":"Active Directory"},{"location":"active-directory/#active-directory-integration","text":"TACTIC provides the ability to easily connect to any active directory installation for both authentication and for synchronization of user data. With a set of directives in the TACTIC configuration file, it is possible to connect to Active Directory for authentication and user information. This synchronization takes place at login time. At this point, TACTIC takes the desired information for a particular user and caches it into the \"sthpw/login\" search type. Subsequent requests would normally use an issued ticket given at login time. On these requests, no further querying of active directory is needed until the ticket expires or the user signs out the application. The active directory modules make use of win32 libraries for python. These must be installed in order for the connection to active directory to function properly","title":"Active Directory Integration"},{"location":"active-directory/#tactic-configuration","text":"There are a number of directives in the TACTIC config file that can be used to configure the active directory settings. These allow you to adjust TACTIC behavior to suit the needs of the facility. In order to turn on active directory authentication, you must change the authenticate class to the following: security ... authenticate_class tactic.active_directory.ADAuthenticate /authenticate_class ... /security The following directives can be set under the active directory category: domains - This is a \"|\" delimited list of the domains that exist in the network. If specified, a selection box for domains will be added to the login page. allow - Can be \"all\", which allows everyone to log in if authentication is approved or it can point to the name of a specific Active Directory attribute that must be set to True. If a person is denied access, the will receive the error: \"Permission denied due to insufficient Active Directory clearance\". default_groups: - Defines the default groups that a user will belong to if none is specified. Multiple groups are delimited by \"|\". default_license_type: - Determines the default license type for a user if none is specified in the Active Directory attribute \"tacticLicenceType\".","title":"TACTIC Configuration"},{"location":"active-directory/#example-configurations","text":"Below is an example of a typical entry in the TACTIC config file, active_directory domains xxx|yyy|zzz /domains allow tacticEnabled /allow default_groups client /default_groups default_license_type user /default_license_type /active_directory Allow anyone to login, active_directory allow all /allow /active_directory Allow anyone to login and will be put in the \"client\" group if user has no groups specified, active_directory allow all /allow /active_directory Only allow those with the attribute tacticEnabled in Active Directory set to \"true\", active_directory allow tacticEnabled /allow /active_directory Enable users to select a domain (xxx, yyy or zzz) in the login screen active_directory allow all /allow domains xxx|yyy|zzz /domains /active_directory","title":"Example Configurations"},{"location":"active-directory/#synchronization","text":"Active Directory attributes use camel case notation (aaaBbbCcc), while TACTIC users lowercase with underscore separators for columns( aaa_bbb_ccc). In order to maintain consistency within the TACTIC application, a mapping of columns from active directory to TACTIC is provided. The following mappings are made by default: mail email telephoneNumber phone_number department department displayName first_name, last_name (broken up) tacticLicenceType license_type The Active Directory variable \"tacticLicenseType\" is a custom variable that indicates which type of license a particular user can occupy in TACTIC. If this attribute is missing from a users active directory profile, then they will be denied a login. This attribute can be used to determine if a particular user in active directory is allowed to login to TACTIC. The only supported license for this attribute are \"user\" and \"default\". Other license types have not yet been implemented yet. On log in, TACTIC will look at all of the groups that a user belongs to in Active Directory and match those group names to the \"ad_login_group\" column in the \"sthpw/login_group\" search type. This grouping list will synchronized at this time, removing the users from groups not specified in Active Directory and add those that are specified. This means that Active Directory is in full control of the groups that a user is part of and therefore must be managed entirely in Active Directory. For the name of the group, TACTIC only looks at the root of the path to map the group name. For example, an active directory group with the following distinguished name: memberOf: CN=supervisor,OU=Users,OU=EIS,DC=domain,DC=us,DC=xxxx,DC=com TACTIC will need only \"supervisor\" to be entered in the \"ad_login_group\" column. If on logging in, the number of users exceeds the number of users in the license, then that user will be denied access and an entry in the \"sthpw/login\" search type will not be made. However, all other users currently registered can continue to work normally.","title":"Synchronization"},{"location":"automate-database-backup/","text":"Automated Backup Linux Cron Configuration Windows Task Scheduler Configuration The Windows Task Scheduler allows you schedule automated backups and run them at convenient times. The Task Scheduler starts each time Windows is started, and runs as a background process. To add a scheduled task: Create a windows batch script to back up the database Click Start\u2192Control Panel\u2192Scheduled Tasks\u2192Add scheduled Task Create the task. Use the provided python script to dump the database. Run the task according to the schedule required. At the concluding stage of the scheduled tasks wizard, be sure to check the \"Open advanced properties for this task when I click Finish\" Edit the command line to read \" path to python \\python dbbackup.py\", and click \"OK\" Custom backup script Procedure Log into the TACTIC server as root Make a backup of the existing /etc/crontab -the original crontab should look something like this: SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root HOME=/ # run-parts 01 * * * * root run-parts /etc/cron.hourly 02 4 * * * root run-parts /etc/cron.daily 22 4 * * 0 root run-parts /etc/cron.weekly 42 4 1 * * root run-parts /etc/cron.monthly The following line is an example of code that will write the date out to a file and run on the 15th minute of every hour: 15 * * * * root date /root/out Modify this example code to run in the next few minutes and add it to the crontab. To see if the cron script ran, after the time has passed, verify that the script wrote out the time to the file` /root/out`. The following line is an example of how to backup the TACTIC database every day at 3:45am yum 45 3 * * * root /usr/bin/pg_dumpall -U postgres /tmp/my_tactic_db_my_date Note Be careful as this example will overwrite the backup every day . Another more clever way is the name the file with the date: 45 3 * * * root /usr/bin/pg_dumpall -U postgres /root/my_tactic_db_`date +\\%Y-\\%m-\\%0e_\\%H:\\%m:\\%S` or 45 3 * * * root my_date= date +\\%Y-\\%m-\\%0e_\\%H:\\%M:\\%S ; /usr/bin/pg_dumpall -U postgres /tmp/my_tactic_db_${my_date} Important *From crontab manpage:*The ``sixth'' field (the rest of the line) specifies the command to be run. The entire command portion of the line, up to a newline or % char- acter, will be executed by /bin/sh or by the shell specified in the SHELL variable of the cronfile. Percent-signs (%) in the command, unless escaped with backslash (\\), will be changed into newline characters, and all data after the first % will be sent to the command as standard input.","title":"Automated Backup"},{"location":"automate-database-backup/#automated-backup","text":"","title":"Automated Backup"},{"location":"automate-database-backup/#linux-cron-configuration","text":"","title":"Linux Cron Configuration"},{"location":"automate-database-backup/#windows-task-scheduler-configuration","text":"The Windows Task Scheduler allows you schedule automated backups and run them at convenient times. The Task Scheduler starts each time Windows is started, and runs as a background process. To add a scheduled task: Create a windows batch script to back up the database Click Start\u2192Control Panel\u2192Scheduled Tasks\u2192Add scheduled Task Create the task. Use the provided python script to dump the database. Run the task according to the schedule required. At the concluding stage of the scheduled tasks wizard, be sure to check the \"Open advanced properties for this task when I click Finish\" Edit the command line to read \" path to python \\python dbbackup.py\", and click \"OK\"","title":"Windows Task Scheduler Configuration"},{"location":"automate-database-backup/#custom-backup-script","text":"Procedure Log into the TACTIC server as root Make a backup of the existing /etc/crontab -the original crontab should look something like this: SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root HOME=/ # run-parts 01 * * * * root run-parts /etc/cron.hourly 02 4 * * * root run-parts /etc/cron.daily 22 4 * * 0 root run-parts /etc/cron.weekly 42 4 1 * * root run-parts /etc/cron.monthly The following line is an example of code that will write the date out to a file and run on the 15th minute of every hour: 15 * * * * root date /root/out Modify this example code to run in the next few minutes and add it to the crontab. To see if the cron script ran, after the time has passed, verify that the script wrote out the time to the file` /root/out`. The following line is an example of how to backup the TACTIC database every day at 3:45am yum 45 3 * * * root /usr/bin/pg_dumpall -U postgres /tmp/my_tactic_db_my_date Note Be careful as this example will overwrite the backup every day . Another more clever way is the name the file with the date: 45 3 * * * root /usr/bin/pg_dumpall -U postgres /root/my_tactic_db_`date +\\%Y-\\%m-\\%0e_\\%H:\\%m:\\%S` or 45 3 * * * root my_date= date +\\%Y-\\%m-\\%0e_\\%H:\\%M:\\%S ; /usr/bin/pg_dumpall -U postgres /tmp/my_tactic_db_${my_date} Important *From crontab manpage:*The ``sixth'' field (the rest of the line) specifies the command to be run. The entire command portion of the line, up to a newline or % char- acter, will be executed by /bin/sh or by the shell specified in the SHELL variable of the cronfile. Percent-signs (%) in the command, unless escaped with backslash (\\), will be changed into newline characters, and all data after the first % will be sent to the command as standard input.","title":"Custom backup script"},{"location":"backup-and-restore-server/","text":"Backup and Restore Server Like any other data producing service, TACTIC requires a backup regimen. The data in that TACTIC produces and manages must be backed up in accordance with the backup policy of the departments that manage the TACTIC service. This documents outlines details of a proper backup policy and manual steps to carry out a backup. To set up an automated backup, see Maintenance Automated Backup. Backup Policy TACTIC managers should create a backup policy for TACTIC data. A backup policy is extremely important, as data loss within the TACTIC service is catastrophic. The following components should be backed up as apart of the backup policy: Assets - Versioned assets are all the files that are checked in and out of the tactic service. Database - Asset metadata are all the data produced by user interaction with the tactic service. TACTIC Application Frequency of backups The frequency of backup of tactic data depends on the policies of the TACTIC managers. An examination of the frequency of use of the tactic service, combined with the down time potentially required to back up tactic data should be considered. Backup methods The only consideration that tactic managers should take into account when creating a backup policy for tactic data is that tactic data produced is synchronized. This is accomplished via a transaction system within tactic. This transaction system relies on co-services to store transacted data. During the backup process, tactic and its co-services should be stopped to prevent any loss of It is highly recommended that you back up your TACTIC server using a regular schedule. In the event of a hardware failure, you will be able to restore your TACTIC server fully from the latest backup. synchronization to these co-services. Note You may want to stop the tactic service while you do your backup process. To do so, run the following commands: service tactic stop service tactic start Assets Versioned assets are all the files that are checked in and out of the tactic service. Typically the tactic service works in conjunction with a co-service such as a network file storage service to accomplish its tasks of asset management. Thus the task of backing up tactic of versioned assets onto these systems usually overlaps with the file management policies of the IT department. Most enterprise class network file storage systems, and third party file backup systems can accomplish the task of backing up tactic assets. Redundant raid storage, snapshots, and offsite backups can all be utilized to accomplish version and asset backups. Backup The 'assets' directory is the repository where TACTIC stores all of the asset files. By backing up this directory, you can restore all of your asset files in the event of a database crash into a clean TACTIC-managed directory structure. Note You may need to contact your TACTIC server administrator if your 'assets' directory has been redirected to another location. Windows The 'assets' directory on a Windows install is located by default in: C:\\assets Linux The 'assets' directory on a Linux install is located by default in: /home/apache/assets Restore To restore the TACTIC 'assets' directory, you have to restore your backup to the current 'assets' location. Database To dump the TACTIC data base you need to log in to the PostgreSQL database and perform a database dump. Note For both Linux and Windows the database file is in the 'assets' directory, although you may redirect the location to your backup location. Also, the TACTIC default for the database is to have no password. If you have added a password, you may need to enter it into your postgres commands with the -P tag. Backup - PostgreSQL Windows pg_dumpall -U postgres -c c:\\assets\\tacticDatabase.sql Linux pg_dumpall -U postgres -c /home/apache/assets/tacticDatabase.sql Restore - PostgreSQL To restore the TACTIC database run the command: psql -U postgres tacticDatabase.sql TACTIC Backup This last step, although not completely necessary, is recommended because it takes a snapshot of your TACTIC source code and project settings at the time of backup. Backup Windows The folders to back up are: C:\\Program Files\\southpaw\\tactic C:\\Program Files\\southpaw\\projects Linux The folders to back up are: /home/apache/tactic /home/apache/projects Restore To restore the TACTIC program files, you have to restore the tactic and projects directories to their original locations.","title":"Backup And Restore Server"},{"location":"backup-and-restore-server/#backup-and-restore-server","text":"Like any other data producing service, TACTIC requires a backup regimen. The data in that TACTIC produces and manages must be backed up in accordance with the backup policy of the departments that manage the TACTIC service. This documents outlines details of a proper backup policy and manual steps to carry out a backup. To set up an automated backup, see Maintenance Automated Backup.","title":"Backup and Restore Server"},{"location":"backup-and-restore-server/#backup-policy","text":"TACTIC managers should create a backup policy for TACTIC data. A backup policy is extremely important, as data loss within the TACTIC service is catastrophic. The following components should be backed up as apart of the backup policy: Assets - Versioned assets are all the files that are checked in and out of the tactic service. Database - Asset metadata are all the data produced by user interaction with the tactic service. TACTIC Application","title":"Backup Policy"},{"location":"backup-and-restore-server/#frequency-of-backups","text":"The frequency of backup of tactic data depends on the policies of the TACTIC managers. An examination of the frequency of use of the tactic service, combined with the down time potentially required to back up tactic data should be considered.","title":"Frequency of backups"},{"location":"backup-and-restore-server/#backup-methods","text":"The only consideration that tactic managers should take into account when creating a backup policy for tactic data is that tactic data produced is synchronized. This is accomplished via a transaction system within tactic. This transaction system relies on co-services to store transacted data. During the backup process, tactic and its co-services should be stopped to prevent any loss of It is highly recommended that you back up your TACTIC server using a regular schedule. In the event of a hardware failure, you will be able to restore your TACTIC server fully from the latest backup. synchronization to these co-services. Note You may want to stop the tactic service while you do your backup process. To do so, run the following commands: service tactic stop service tactic start","title":"Backup methods"},{"location":"backup-and-restore-server/#assets","text":"Versioned assets are all the files that are checked in and out of the tactic service. Typically the tactic service works in conjunction with a co-service such as a network file storage service to accomplish its tasks of asset management. Thus the task of backing up tactic of versioned assets onto these systems usually overlaps with the file management policies of the IT department. Most enterprise class network file storage systems, and third party file backup systems can accomplish the task of backing up tactic assets. Redundant raid storage, snapshots, and offsite backups can all be utilized to accomplish version and asset backups.","title":"Assets"},{"location":"backup-and-restore-server/#backup","text":"The 'assets' directory is the repository where TACTIC stores all of the asset files. By backing up this directory, you can restore all of your asset files in the event of a database crash into a clean TACTIC-managed directory structure. Note You may need to contact your TACTIC server administrator if your 'assets' directory has been redirected to another location. Windows The 'assets' directory on a Windows install is located by default in: C:\\assets Linux The 'assets' directory on a Linux install is located by default in: /home/apache/assets","title":"Backup"},{"location":"backup-and-restore-server/#restore","text":"To restore the TACTIC 'assets' directory, you have to restore your backup to the current 'assets' location.","title":"Restore"},{"location":"backup-and-restore-server/#database","text":"To dump the TACTIC data base you need to log in to the PostgreSQL database and perform a database dump. Note For both Linux and Windows the database file is in the 'assets' directory, although you may redirect the location to your backup location. Also, the TACTIC default for the database is to have no password. If you have added a password, you may need to enter it into your postgres commands with the -P tag.","title":"Database"},{"location":"backup-and-restore-server/#backup-postgresql","text":"Windows pg_dumpall -U postgres -c c:\\assets\\tacticDatabase.sql Linux pg_dumpall -U postgres -c /home/apache/assets/tacticDatabase.sql","title":"Backup - PostgreSQL"},{"location":"backup-and-restore-server/#restore-postgresql","text":"To restore the TACTIC database run the command: psql -U postgres tacticDatabase.sql","title":"Restore - PostgreSQL"},{"location":"backup-and-restore-server/#tactic-backup","text":"This last step, although not completely necessary, is recommended because it takes a snapshot of your TACTIC source code and project settings at the time of backup.","title":"TACTIC Backup"},{"location":"backup-and-restore-server/#backup_1","text":"Windows The folders to back up are: C:\\Program Files\\southpaw\\tactic C:\\Program Files\\southpaw\\projects Linux The folders to back up are: /home/apache/tactic /home/apache/projects","title":"Backup"},{"location":"backup-and-restore-server/#restore_1","text":"To restore the TACTIC program files, you have to restore the tactic and projects directories to their original locations.","title":"Restore"},{"location":"configure-http-iis-7/","text":"IIS 7+ HTTP Co-Service Configuration Windows HTTP co-service installations are IIS based. On IIS installations prior to version 7, appropriate 3rd party proxying software (the ISAPI_Rewrite module) is required to be installed with IIS to enable the proper functioning of TACTIC. TACTIC can be configured to work with the native IIS 7.5 services available on applicable Windows OS\u2019s, such as Windows 7 and Windows Server 2008. Prior versions of IIS have required 3rd party software (the ISAPI_Rewrite module) to be installed alongside the IIS service to facilitate proxy and URL rewriting. With IIS 7.5, and the introduction of the ARR and URL rewrite module, the requirement of a 3rd party software is no longer needed. On Windows 7, and Windows Server 2008, IIS is installed through means and directions published on Microsoft support websites. Please consult installation guides published by Microsoft for the installation procedure of IIS. Typically, IIS 7.5 does not come with the ARR module, and depending on the IIS installation, URL rewrite. These modules are requirements for a installation alongside TACTIC. Please refer to Microsoft published documentation regarding installation of these modules. Permissions must be set for IIS to be able to serve assets that TACTIC manages. TACTIC requires that the IIS user have access to TACTIC assets and all of the virtual directories that contain TACTIC widgets. Whether the assets directory is stored on the host machine or on a network mount, there should be a assigned user that runs TACTIC. For non-domain Windows machines, a local user created on the TACTIC host, such as the IUSR_ computer_name automatically created by an IIS installation will suffice, provided that the network mounted directories are writable by the system user. For ADS domains, a user can be created on the domain, and assigned via the Services control panel. Assigning a domain user to the TACTIC service will allow domain level security rules to apply. To assign a user to a service: Open the Services control panel Right click on the \"TACTIC application server\" Click on the \"Log On\" tab Change the \"log on as\" option to reflect the user created, whether local or domain based. For a locally hosted asset directory , the anonymous user (typically IUSR_ computer name ) account needs to be granted access to the directories, and all subdirectories under them. Find the directories above in Windows Explorer, and right click on the directory to bring up \u201cSharing and Security\ufffd? for that directory. IIS must be configured to serve static content, such as TACTIC assets, and TACTIC UI skins. Virtual directories required by TACTIC Directory Description Directory Alias Location Assets storage assets User provided during installation TACTIC UI widgets context Inside TACTIC installation directory Documentation doc Inside TACTIC installation directory Project storage projects User provided during installation There are four \u201cvirtual directories\ufffd? that must be created to access the static content provided by TACTIC. To create the directories; Right click on \u201cDefault web site\ufffd? and \u201cAdd Virtual Directory\ufffd? Create the virtual directory, using the paths that were created by the installation of TACTIC. The default paths may not apply. 3. Important If the directory is located on a network mount, it may have to be connected to as the user running the TACTIC service. To connect as a different user than the IIS user, click on the \"Connect As\" + + Then click on the \"Set\u2026\u200b\" button, and fill in the details of the user that will run the TACTIC service. + There should now be 4 virtual entries on the IIS service. Application Request Routing (ARR) is the module snap-in that will proxy and load balance requests. ARR is required by IIS to split incoming TACTIC service requests between the dynamic content that drives the API and the TACTIC web UI, and static content. In order to achieve this, IIS must be configured to send certain requests to the TACTIC application server, while static data requests (usually assets) are sent to IIS. This guide currently supports two methods of attaching the TACTIC service to an IIS co-service. Proxy/Load balancing The Load balancing configuration of IIS splits TACTIC service requests into multiple streams, with each stream utilizing its own TACTIC service process. Proxy Only The proxy-only configuration routes all TACTIC service requests to a single TACTIC service. This method should only be used in light usage TACTIC installations such as development servers. A TACTIC installation by default runs 3 seperate TACTIC service listeners, arranged on default ports 8081, 8082 and 8083. To split TACTIC service requests into multiple streams, IIS must be configured to consider TACTIC part of a \u201cserver farm\ufffd?. Since all of the TACTIC services are running on one single host, IIS currently must be tricked into routing requests to the 3 different TACTIC streams on the localhost. By default, windows looks in the hosts file, then to DNS for named hosts. To divide localhost into three \u201cdifferent\ufffd? machines, the \u201c%SYSTEMROOT%/System32/drivers/etc/host\ufffd? file must be edited to be able to address localhost as more than one machine. Important If TACTIC is set to run a number of processes other than the default of three, then these instructions must reflect that number. Add or subtract from the list of localhost entries and web farm entries accordingly. To create a web farm ; As an \u201cAdministrator\ufffd? user, edit the \u201c127.0.0.1\ufffd? line in this file The addition of localhost-2 and localhost-3 that reference 127.0.0.1 allow this host machine to access localhost as more than one machine. Now the Server Farm reference must be created. Start the IIS snap in, and select the Web server that will be used as a TACTIC co-service in the left side navigation bar. Right click on the \u201cServer Farms\ufffd? folder and create a new server farm. 3 seperate servers must be added to the server farm to correspond to the 3 default TACTIC service processes. Add each server according to the below table. Server Address httpPort localhost-1 8081 localhost-2 8082 localhost-3 8083 Click on \u201cAdd\ufffd? when done each entry in the above list. For additional servers, the \u201cserver address\ufffd? must correspond to the additional localhost entries in the \u201chosts\ufffd? file. The ports must correspond to 8082, 8083, etc. Add the required number of servers according to TACTIC deployment requirements. Click \u201cFinish\ufffd? when done. Create the rewrite rule when prompted. URL rewrite must now be configured to only send TACTIC API requests to the server farm. Click on the server farm icon on the left-hand side of IIS manager and click the \u201cRouting Rules\ufffd? icon. In the right pane of the Routing rules section, click the \"URL rewrite\" link Select the automatically created URL rewrite rule created when the web farm was created, and click on the \"Edit\" link in the right pane. In the \u201cEdit Inbound rule\ufffd? pane, edit the pattern to read \u201ctactic*,projects*\ufffd? This will instruct IIS to route all TACTIC UI requests to the TACTIC service. Apply the change. ARR comes with several load balancing algorithms. Click on the newly created server farm, and click on the \u201cLoad Balancing\ufffd? icon. Select \u201cWeighted round robin\ufffd? as the algorithm, and \u201cEven distribution\ufffd? as the load distribution. IIS can be configured to run a single rewrite rule to forward requests to a single TACTIC service. Start the IIS snap in, and select the Web server that will be used as a TACTIC co-service in the left side navigation bar. Choose \u201cApplication request routing\ufffd? And click on server proxy settings on the right-hand side. In the ARR options under the proxy settings check the \u201cuse URL rewrite to inspect incoming requests\ufffd?, And in the \u201creverse proxy\ufffd? text area type \u201clocalhost:8081\ufffd?. This instructs IIS to proxy everything to this address and port. From here URL Rewrite can then be instructed to filter proxy requests. Click on the \u201cURL rewrite\ufffd? link on the right-hand side to modify rewrite rules. Typically, if the proxy has been created in ARR, then a rule will be created in URL rewrite. IIS must then be instructed to only proxy TACTIC UI and API requests. To do this, an automatically created rule must be altered to allow TACTIC asset requests to be handled by IIS. To modify the existing rule for TACTIC, the pattern under \"Match URL\" should be \"tactic*\". The action \u201cRewrite URL\ufffd? should be \"http://localhost:8081/\\{R:0}\" TACTIC currently has a requirement to insert custom MIME types into the list of allowed types for the IIS service. MIME type Function Extension text/plain Python Script mask .xx To add a MIME type in IIS 7 Click on the web server entry in the left-hand pane. Click on the MIME types icon in the centre pane. Click on the \"Add\u2026\u200b\" link on the right-hand pane. Add all entries required by the table above. At this point IIS should be configured to proxy TACTIC service requests to the TACTIC service, while leaving all other requests to IIS. http://learn.iis.net/page.aspx/485/define-and-configure-an-application-request-routing-server-farm/ http://learn.iis.net/page.aspx/486/http-load-balancing-using-application-request-routing/ http://blogs.msdn.com/nickhodge/default.aspx?p=2","title":"HTTP IIS 7"},{"location":"configure-http-iis-7/#iis-7-http-co-service-configuration","text":"Windows HTTP co-service installations are IIS based. On IIS installations prior to version 7, appropriate 3rd party proxying software (the ISAPI_Rewrite module) is required to be installed with IIS to enable the proper functioning of TACTIC. TACTIC can be configured to work with the native IIS 7.5 services available on applicable Windows OS\u2019s, such as Windows 7 and Windows Server 2008. Prior versions of IIS have required 3rd party software (the ISAPI_Rewrite module) to be installed alongside the IIS service to facilitate proxy and URL rewriting. With IIS 7.5, and the introduction of the ARR and URL rewrite module, the requirement of a 3rd party software is no longer needed. On Windows 7, and Windows Server 2008, IIS is installed through means and directions published on Microsoft support websites. Please consult installation guides published by Microsoft for the installation procedure of IIS. Typically, IIS 7.5 does not come with the ARR module, and depending on the IIS installation, URL rewrite. These modules are requirements for a installation alongside TACTIC. Please refer to Microsoft published documentation regarding installation of these modules. Permissions must be set for IIS to be able to serve assets that TACTIC manages. TACTIC requires that the IIS user have access to TACTIC assets and all of the virtual directories that contain TACTIC widgets. Whether the assets directory is stored on the host machine or on a network mount, there should be a assigned user that runs TACTIC. For non-domain Windows machines, a local user created on the TACTIC host, such as the IUSR_ computer_name automatically created by an IIS installation will suffice, provided that the network mounted directories are writable by the system user. For ADS domains, a user can be created on the domain, and assigned via the Services control panel. Assigning a domain user to the TACTIC service will allow domain level security rules to apply. To assign a user to a service: Open the Services control panel Right click on the \"TACTIC application server\" Click on the \"Log On\" tab Change the \"log on as\" option to reflect the user created, whether local or domain based. For a locally hosted asset directory , the anonymous user (typically IUSR_ computer name ) account needs to be granted access to the directories, and all subdirectories under them. Find the directories above in Windows Explorer, and right click on the directory to bring up \u201cSharing and Security\ufffd? for that directory. IIS must be configured to serve static content, such as TACTIC assets, and TACTIC UI skins. Virtual directories required by TACTIC Directory Description Directory Alias Location Assets storage assets User provided during installation TACTIC UI widgets context Inside TACTIC installation directory Documentation doc Inside TACTIC installation directory Project storage projects User provided during installation There are four \u201cvirtual directories\ufffd? that must be created to access the static content provided by TACTIC. To create the directories; Right click on \u201cDefault web site\ufffd? and \u201cAdd Virtual Directory\ufffd? Create the virtual directory, using the paths that were created by the installation of TACTIC. The default paths may not apply. 3. Important If the directory is located on a network mount, it may have to be connected to as the user running the TACTIC service. To connect as a different user than the IIS user, click on the \"Connect As\" + + Then click on the \"Set\u2026\u200b\" button, and fill in the details of the user that will run the TACTIC service. + There should now be 4 virtual entries on the IIS service. Application Request Routing (ARR) is the module snap-in that will proxy and load balance requests. ARR is required by IIS to split incoming TACTIC service requests between the dynamic content that drives the API and the TACTIC web UI, and static content. In order to achieve this, IIS must be configured to send certain requests to the TACTIC application server, while static data requests (usually assets) are sent to IIS. This guide currently supports two methods of attaching the TACTIC service to an IIS co-service. Proxy/Load balancing The Load balancing configuration of IIS splits TACTIC service requests into multiple streams, with each stream utilizing its own TACTIC service process. Proxy Only The proxy-only configuration routes all TACTIC service requests to a single TACTIC service. This method should only be used in light usage TACTIC installations such as development servers. A TACTIC installation by default runs 3 seperate TACTIC service listeners, arranged on default ports 8081, 8082 and 8083. To split TACTIC service requests into multiple streams, IIS must be configured to consider TACTIC part of a \u201cserver farm\ufffd?. Since all of the TACTIC services are running on one single host, IIS currently must be tricked into routing requests to the 3 different TACTIC streams on the localhost. By default, windows looks in the hosts file, then to DNS for named hosts. To divide localhost into three \u201cdifferent\ufffd? machines, the \u201c%SYSTEMROOT%/System32/drivers/etc/host\ufffd? file must be edited to be able to address localhost as more than one machine. Important If TACTIC is set to run a number of processes other than the default of three, then these instructions must reflect that number. Add or subtract from the list of localhost entries and web farm entries accordingly. To create a web farm ; As an \u201cAdministrator\ufffd? user, edit the \u201c127.0.0.1\ufffd? line in this file The addition of localhost-2 and localhost-3 that reference 127.0.0.1 allow this host machine to access localhost as more than one machine. Now the Server Farm reference must be created. Start the IIS snap in, and select the Web server that will be used as a TACTIC co-service in the left side navigation bar. Right click on the \u201cServer Farms\ufffd? folder and create a new server farm. 3 seperate servers must be added to the server farm to correspond to the 3 default TACTIC service processes. Add each server according to the below table. Server Address httpPort localhost-1 8081 localhost-2 8082 localhost-3 8083 Click on \u201cAdd\ufffd? when done each entry in the above list. For additional servers, the \u201cserver address\ufffd? must correspond to the additional localhost entries in the \u201chosts\ufffd? file. The ports must correspond to 8082, 8083, etc. Add the required number of servers according to TACTIC deployment requirements. Click \u201cFinish\ufffd? when done. Create the rewrite rule when prompted. URL rewrite must now be configured to only send TACTIC API requests to the server farm. Click on the server farm icon on the left-hand side of IIS manager and click the \u201cRouting Rules\ufffd? icon. In the right pane of the Routing rules section, click the \"URL rewrite\" link Select the automatically created URL rewrite rule created when the web farm was created, and click on the \"Edit\" link in the right pane. In the \u201cEdit Inbound rule\ufffd? pane, edit the pattern to read \u201ctactic*,projects*\ufffd? This will instruct IIS to route all TACTIC UI requests to the TACTIC service. Apply the change. ARR comes with several load balancing algorithms. Click on the newly created server farm, and click on the \u201cLoad Balancing\ufffd? icon. Select \u201cWeighted round robin\ufffd? as the algorithm, and \u201cEven distribution\ufffd? as the load distribution. IIS can be configured to run a single rewrite rule to forward requests to a single TACTIC service. Start the IIS snap in, and select the Web server that will be used as a TACTIC co-service in the left side navigation bar. Choose \u201cApplication request routing\ufffd? And click on server proxy settings on the right-hand side. In the ARR options under the proxy settings check the \u201cuse URL rewrite to inspect incoming requests\ufffd?, And in the \u201creverse proxy\ufffd? text area type \u201clocalhost:8081\ufffd?. This instructs IIS to proxy everything to this address and port. From here URL Rewrite can then be instructed to filter proxy requests. Click on the \u201cURL rewrite\ufffd? link on the right-hand side to modify rewrite rules. Typically, if the proxy has been created in ARR, then a rule will be created in URL rewrite. IIS must then be instructed to only proxy TACTIC UI and API requests. To do this, an automatically created rule must be altered to allow TACTIC asset requests to be handled by IIS. To modify the existing rule for TACTIC, the pattern under \"Match URL\" should be \"tactic*\". The action \u201cRewrite URL\ufffd? should be \"http://localhost:8081/\\{R:0}\" TACTIC currently has a requirement to insert custom MIME types into the list of allowed types for the IIS service. MIME type Function Extension text/plain Python Script mask .xx To add a MIME type in IIS 7 Click on the web server entry in the left-hand pane. Click on the MIME types icon in the centre pane. Click on the \"Add\u2026\u200b\" link on the right-hand pane. Add all entries required by the table above. At this point IIS should be configured to proxy TACTIC service requests to the TACTIC service, while leaving all other requests to IIS. http://learn.iis.net/page.aspx/485/define-and-configure-an-application-request-routing-server-farm/ http://learn.iis.net/page.aspx/486/http-load-balancing-using-application-request-routing/ http://blogs.msdn.com/nickhodge/default.aspx?p=2","title":"IIS 7+ HTTP Co-Service Configuration"},{"location":"configure-remote-repo/","text":"Configure the Remote Repo The remote repository (repo) setting describes the specific environment that remote users or a remote facility may use, in the situation where it differs from the environment used by the master repository. To set up a remote repo, you can insert an entry that represents users or a group of users that fall under a certain IP address or IP mask combo. Note If you want everyone at an IP address to use the same remote repo, a typical IP mask value is 255.255.255.255 The login name is only required when you are not using an IP address or IP mask combo to specify users. The sandbox path and local repo path can be a network path like: \\\\ server_name \\ share_name \\..\\repo or (for Windows) Z:/repo","title":"Configure the Remote Repo"},{"location":"configure-remote-repo/#configure-the-remote-repo","text":"The remote repository (repo) setting describes the specific environment that remote users or a remote facility may use, in the situation where it differs from the environment used by the master repository. To set up a remote repo, you can insert an entry that represents users or a group of users that fall under a certain IP address or IP mask combo. Note If you want everyone at an IP address to use the same remote repo, a typical IP mask value is 255.255.255.255 The login name is only required when you are not using an IP address or IP mask combo to specify users. The sandbox path and local repo path can be a network path like: \\\\ server_name \\ share_name \\..\\repo or (for Windows) Z:/repo","title":"Configure the Remote Repo"},{"location":"configure-ssl/","text":"Configuring SSL This document discusses security layers that can be implemented on top of the TACTIC service. Services covered Apache HTTP server IIS HTTP server PPTP server IPsec Southpaw Technology does not provide any support, either direct or implied, for remote access. Any application that is put on a public network can potentially be compromised, even with rigorous security testing. TACTIC, in its current version, has not been production tested for security scenarios outside of completely trusted networks like intranets. This document does not make any claims that TACTIC has any level of security beyond what its current architecture design allows. TACTIC is a bandwidth-intensive application, and client-server performance will be affected by any number of network issues between the client and the server. There are numerous elements of functionality that go beyond utilizing HTTP port access in enterprise applications of TACTIC. Many 3rd party applications that communicate with TACTIC will produce unexpected behavior when utilized in a fashion that was not intended for the product, such as use in remote applications. TACTIC on public networks HTTP transport co-services can be configured to provide authentication services to TACTIC. HTTP zone access The simplest form of HTTP security authentication zone access. To enable different security scenarios, the HTTP service must be configured for use of these scenarios. Configuration files (usually called .htaccess files) contain a number of settings that can be used for integrating the application with the capabilities of the Web server. When enabling password zone access, the password is transmitted to the server in cleartext, unless TLS is enabled. Apache Apache uses either directives for directory access in the httpd.conf file, or can be enabled on a per-directory basis, with the use of a .htaccess file. Either way can be used. Apache provides modules for LDAP, MySQL, flat-file, ADS, and many other authentication mechanisms. IIS IIS can be configured at the top level through the IIS snap-in, or by individual configuration file. IIS 7 uses a file called Web.config to hold settings for integration with applications. The Web.config file contains information that control module loading, security configuration, session state configuration, and application language and compilation settings. SSL Overview TACTIC can be configured to use the SSL transport layer. This layer is independent of the TACTIC service, and can be tailored to the needs of the deployment without major changes to the TACTIC service. Both major HTTP servers can be configured for SSL support. There are many materials online available for configuration of the various flavors of these two major HTTP service projects. Since there are many different versions of these servers, a simple search of Windows 2003 IIS SSL as an example will yield many HOWTOs and configuration references. Please consult the documentation for these services. The configuration examples that have been set out below are by no means complete. Depending on the HTTP service used, and the platform used, these examples may not be enough set directives or steps to properly complete the SSL process. They are given as guides. Steps The major steps to utilizing SSL in with TACTIC are Enabling TACTIC to converse with SSL Enabling the SSL service Creating a Virtual Server, or extending the existing server to accept SSL Providing CA certificates TACTIC configuration The SSL HTTP layer is kept separate from TACTIC via a proxy, so the only configuration change required of TACTIC is in the tactic_(OS).conf file. The security protocol directive must tell TACTIC to expect an SSL delivery. security protocol https /protocol /security The setting can be set to either \"http\" or \"https\". Apache The apache project uses mod_ssl as a modular way of inserting SSL capabilities into the HTTP service. The example OS is Fedora 11. \"Yum\" is used to add SSL to apache. [root@lindsay conf.d]# yum install mod_ssl Loaded plugins: refresh-packagekit \u2026 Complete! [root@lindsay conf.d]# Once mod_ssl is added, the Apache configuration should contain at least these directives. The example directives are contained in conf.d/ssl.conf in the Fedora 11 example. File locations will vary according to OS. LoadModule ssl_module modules/mod_ssl.so Listen 443 SSLPassPhraseDialog builtin SSLSessionCache shmcb:/var/cache/mod_ssl/scache(512000) SSLSessionCacheTimeout 300 SSLMutex default SSLRandomSeed startup file:/dev/urandom 256 SSLRandomSeed connect builtin SSLCryptoDevice builtin VirtualHost _default_:443 SSLEngine on SSLProtocol all -SSLv2 SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW SLCertificateFile /etc/pki/tls/certs/localhost.crt SSLCertificateFile /etc/pki/tls/certs/localhost.crt SSLCertificateKeyFile /etc/pki/tls/private/localhost.key As soon as its added and the server is restarted, the SSL service becomes available on the network interface that apache is running on. IIS IIS can be configured at the top level through the IIS snap-in, or by individual configuration file. To configure SSL on a Web server or a Web site, In IIS Manager, double-click the local computer, and then double-click the Web Sites folder. Right-click the Web site or file that you want to protect with SSL, and then click Properties. Under Web site identification click Advanced. In the Advanced Web site identification box, under Multiple identities for this Web site, verify that the Web site IP address is assigned to port 443, the default port for secure communications, and then click OK. Optionally, to configure more SSL ports for this Web site, click Add under Multiple identities of this Web site, and then click OK. On the Directory Security or File Security tab, under Secure communications, click Edit. In the Secure Communications box, select the Require secure channel (SSL) check box. To enable SSL client certificate authentication and mapping features, select the Enable client certificate mapping check box, click Edit, add the 1-to-1 or many-to-1 mappings you need, and then click OK three times. Secure transaction processing Processing transactions securely on the web means that there is a need to be able to transmit information between the web site and the customer in a manner that makes it difficult for other people to intercept and read. SSL, or Secure Sockets Layer, takes care of this. It works through a combination of programs and encryption/decryption routines that exist on the web services host, and in browser programs (like Firefox and Internet Explorer) Performance TLS has encryption/decryption routines as part of its security. These routines can be bandwidth/CPU intensive. Any usage of TLS can compromise TACTIC, if the routines are incorporated into the same host as the TACTIC service. See guides on load-balancing for details on offsetting this. VPN A VPN will provide the most trouble-free access to TACTIC remotely. In this scenario, the authentication/encryption routines are completely removed from the realm of TACTIC configuration. This not only helps to isolate TACTIC from complex configuration issues, but also allows for isolated troubleshooting of remote access issues. PPTP PPTP is Microsoft supplied product. If an enterprise deployment of TACTIC includes ADS authentication, then PPTP can be used as the VPN transport layer. Usually, deployment is quite easily done. In PPTP, usernames and passwords are used to complete the VPN link. PPTP can be considered the \"road-warrior\" VPN, meaning that it is easily deployed to users. IPsec Ipsec is a suite of protocols used to secure data between hosts. A VPN can be transported on top of this protocol. Typically, two remote hosts are configured to communicate with each other, such as routers. This type of VPN is typically used to connect two offices together. Hardware VPNs Hardware VPNs such as offerings provided by companies like Cisco, can be easily implemented. These Systems are designed for minimal ramp-up, and can be implemented quickly. Security Terms MITM \u201cis a form of active eavesdropping in which the attacker makes independent connections with the victims and relays messages between them, making them believe that they are talking directly to each other over a private connection, when in fact the entire conversation is controlled by the attacker. The attacker must be able to intercept all messages going between the two victims and inject new ones, which is straightforward in many circumstances (for example, an attacker within reception range of an unencrypted Wi-Fi wireless access point, can insert himself as a man-in-the-middle). SSL (Wikipedia) \u201cTransport Layer Security (TLS) and its predecessor, Secure Sockets Layer (SSL), are cryptographic protocols that provide security for communications over networks such as the Internet. TLS and SSL encrypt the segments of network connections at the Transport Layer end-to-end. Cleartext (Wikipedia) Cleartext is transmitted, unencrypted text. \u201cIn a cryptosystem, weaknesses can be introduced through insecure handling of plaintext, allowing an attacker to bypass the cryptography altogether. Plaintext is vulnerable in use and in storage, whether in electronic or paper format. \u201c PPTP (wikipedia) The Point-to-Point Tunneling Protocol (PPTP) is a method for implementing virtual private networks. PPTP uses a control channel over TCP and a GRE tunnel operating to encapsulate PPP packets. The PPTP specification does not describe encryption or authentication features and relies on the PPP protocol being tunneled to implement security functionality. However the most common PPTP implementation, shipping with the Microsoft Windows product families, implements various levels of authentication and encryption natively as standard features of the Windows PPTP stack. The intended use of this protocol is to provide similar levels of security and remote access as typical VPN products. IPSEC (Wikipedia) Internet Protocol Security (IPsec) is a protocol suite for securing Internet Protocol (IP) communications by authenticating and encrypting each IP packet of a data stream. IPsec also includes protocols for establishing mutual authentication between agents at the beginning of the session and negotiation of cryptographic keys to be used during the session. IPsec can be used to protect data flows between a pair of hosts (e.g. computer users or servers), between a pair of security gateways (e.g. routers or firewalls), or between a security gateway and a host.","title":"SSL"},{"location":"configure-ssl/#configuring-ssl","text":"This document discusses security layers that can be implemented on top of the TACTIC service. Services covered Apache HTTP server IIS HTTP server PPTP server IPsec Southpaw Technology does not provide any support, either direct or implied, for remote access. Any application that is put on a public network can potentially be compromised, even with rigorous security testing. TACTIC, in its current version, has not been production tested for security scenarios outside of completely trusted networks like intranets. This document does not make any claims that TACTIC has any level of security beyond what its current architecture design allows. TACTIC is a bandwidth-intensive application, and client-server performance will be affected by any number of network issues between the client and the server. There are numerous elements of functionality that go beyond utilizing HTTP port access in enterprise applications of TACTIC. Many 3rd party applications that communicate with TACTIC will produce unexpected behavior when utilized in a fashion that was not intended for the product, such as use in remote applications. TACTIC on public networks HTTP transport co-services can be configured to provide authentication services to TACTIC. HTTP zone access The simplest form of HTTP security authentication zone access. To enable different security scenarios, the HTTP service must be configured for use of these scenarios. Configuration files (usually called .htaccess files) contain a number of settings that can be used for integrating the application with the capabilities of the Web server. When enabling password zone access, the password is transmitted to the server in cleartext, unless TLS is enabled. Apache Apache uses either directives for directory access in the httpd.conf file, or can be enabled on a per-directory basis, with the use of a .htaccess file. Either way can be used. Apache provides modules for LDAP, MySQL, flat-file, ADS, and many other authentication mechanisms. IIS IIS can be configured at the top level through the IIS snap-in, or by individual configuration file. IIS 7 uses a file called Web.config to hold settings for integration with applications. The Web.config file contains information that control module loading, security configuration, session state configuration, and application language and compilation settings.","title":"Configuring SSL"},{"location":"configure-ssl/#ssl","text":"","title":"SSL"},{"location":"configure-ssl/#overview","text":"TACTIC can be configured to use the SSL transport layer. This layer is independent of the TACTIC service, and can be tailored to the needs of the deployment without major changes to the TACTIC service. Both major HTTP servers can be configured for SSL support. There are many materials online available for configuration of the various flavors of these two major HTTP service projects. Since there are many different versions of these servers, a simple search of Windows 2003 IIS SSL as an example will yield many HOWTOs and configuration references. Please consult the documentation for these services. The configuration examples that have been set out below are by no means complete. Depending on the HTTP service used, and the platform used, these examples may not be enough set directives or steps to properly complete the SSL process. They are given as guides. Steps The major steps to utilizing SSL in with TACTIC are Enabling TACTIC to converse with SSL Enabling the SSL service Creating a Virtual Server, or extending the existing server to accept SSL Providing CA certificates","title":"Overview"},{"location":"configure-ssl/#tactic-configuration","text":"The SSL HTTP layer is kept separate from TACTIC via a proxy, so the only configuration change required of TACTIC is in the tactic_(OS).conf file. The security protocol directive must tell TACTIC to expect an SSL delivery. security protocol https /protocol /security The setting can be set to either \"http\" or \"https\".","title":"TACTIC configuration"},{"location":"configure-ssl/#apache","text":"The apache project uses mod_ssl as a modular way of inserting SSL capabilities into the HTTP service. The example OS is Fedora 11. \"Yum\" is used to add SSL to apache. [root@lindsay conf.d]# yum install mod_ssl Loaded plugins: refresh-packagekit \u2026 Complete! [root@lindsay conf.d]# Once mod_ssl is added, the Apache configuration should contain at least these directives. The example directives are contained in conf.d/ssl.conf in the Fedora 11 example. File locations will vary according to OS. LoadModule ssl_module modules/mod_ssl.so Listen 443 SSLPassPhraseDialog builtin SSLSessionCache shmcb:/var/cache/mod_ssl/scache(512000) SSLSessionCacheTimeout 300 SSLMutex default SSLRandomSeed startup file:/dev/urandom 256 SSLRandomSeed connect builtin SSLCryptoDevice builtin VirtualHost _default_:443 SSLEngine on SSLProtocol all -SSLv2 SSLCipherSuite ALL:!ADH:!EXPORT:!SSLv2:RC4+RSA:+HIGH:+MEDIUM:+LOW SLCertificateFile /etc/pki/tls/certs/localhost.crt SSLCertificateFile /etc/pki/tls/certs/localhost.crt SSLCertificateKeyFile /etc/pki/tls/private/localhost.key As soon as its added and the server is restarted, the SSL service becomes available on the network interface that apache is running on.","title":"Apache"},{"location":"configure-ssl/#iis","text":"IIS can be configured at the top level through the IIS snap-in, or by individual configuration file. To configure SSL on a Web server or a Web site, In IIS Manager, double-click the local computer, and then double-click the Web Sites folder. Right-click the Web site or file that you want to protect with SSL, and then click Properties. Under Web site identification click Advanced. In the Advanced Web site identification box, under Multiple identities for this Web site, verify that the Web site IP address is assigned to port 443, the default port for secure communications, and then click OK. Optionally, to configure more SSL ports for this Web site, click Add under Multiple identities of this Web site, and then click OK. On the Directory Security or File Security tab, under Secure communications, click Edit. In the Secure Communications box, select the Require secure channel (SSL) check box. To enable SSL client certificate authentication and mapping features, select the Enable client certificate mapping check box, click Edit, add the 1-to-1 or many-to-1 mappings you need, and then click OK three times.","title":"IIS"},{"location":"configure-ssl/#secure-transaction-processing","text":"Processing transactions securely on the web means that there is a need to be able to transmit information between the web site and the customer in a manner that makes it difficult for other people to intercept and read. SSL, or Secure Sockets Layer, takes care of this. It works through a combination of programs and encryption/decryption routines that exist on the web services host, and in browser programs (like Firefox and Internet Explorer)","title":"Secure transaction processing"},{"location":"configure-ssl/#performance","text":"TLS has encryption/decryption routines as part of its security. These routines can be bandwidth/CPU intensive. Any usage of TLS can compromise TACTIC, if the routines are incorporated into the same host as the TACTIC service. See guides on load-balancing for details on offsetting this.","title":"Performance"},{"location":"configure-ssl/#vpn","text":"A VPN will provide the most trouble-free access to TACTIC remotely. In this scenario, the authentication/encryption routines are completely removed from the realm of TACTIC configuration. This not only helps to isolate TACTIC from complex configuration issues, but also allows for isolated troubleshooting of remote access issues.","title":"VPN"},{"location":"configure-ssl/#pptp","text":"PPTP is Microsoft supplied product. If an enterprise deployment of TACTIC includes ADS authentication, then PPTP can be used as the VPN transport layer. Usually, deployment is quite easily done. In PPTP, usernames and passwords are used to complete the VPN link. PPTP can be considered the \"road-warrior\" VPN, meaning that it is easily deployed to users.","title":"PPTP"},{"location":"configure-ssl/#ipsec","text":"Ipsec is a suite of protocols used to secure data between hosts. A VPN can be transported on top of this protocol. Typically, two remote hosts are configured to communicate with each other, such as routers. This type of VPN is typically used to connect two offices together.","title":"IPsec"},{"location":"configure-ssl/#hardware-vpns","text":"Hardware VPNs such as offerings provided by companies like Cisco, can be easily implemented. These Systems are designed for minimal ramp-up, and can be implemented quickly.","title":"Hardware VPNs"},{"location":"configure-ssl/#security-terms","text":"MITM \u201cis a form of active eavesdropping in which the attacker makes independent connections with the victims and relays messages between them, making them believe that they are talking directly to each other over a private connection, when in fact the entire conversation is controlled by the attacker. The attacker must be able to intercept all messages going between the two victims and inject new ones, which is straightforward in many circumstances (for example, an attacker within reception range of an unencrypted Wi-Fi wireless access point, can insert himself as a man-in-the-middle). SSL (Wikipedia) \u201cTransport Layer Security (TLS) and its predecessor, Secure Sockets Layer (SSL), are cryptographic protocols that provide security for communications over networks such as the Internet. TLS and SSL encrypt the segments of network connections at the Transport Layer end-to-end. Cleartext (Wikipedia) Cleartext is transmitted, unencrypted text. \u201cIn a cryptosystem, weaknesses can be introduced through insecure handling of plaintext, allowing an attacker to bypass the cryptography altogether. Plaintext is vulnerable in use and in storage, whether in electronic or paper format. \u201c PPTP (wikipedia) The Point-to-Point Tunneling Protocol (PPTP) is a method for implementing virtual private networks. PPTP uses a control channel over TCP and a GRE tunnel operating to encapsulate PPP packets. The PPTP specification does not describe encryption or authentication features and relies on the PPP protocol being tunneled to implement security functionality. However the most common PPTP implementation, shipping with the Microsoft Windows product families, implements various levels of authentication and encryption natively as standard features of the Windows PPTP stack. The intended use of this protocol is to provide similar levels of security and remote access as typical VPN products. IPSEC (Wikipedia) Internet Protocol Security (IPsec) is a protocol suite for securing Internet Protocol (IP) communications by authenticating and encrypting each IP packet of a data stream. IPsec also includes protocols for establishing mutual authentication between agents at the beginning of the session and negotiation of cryptographic keys to be used during the session. IPsec can be used to protect data flows between a pair of hosts (e.g. computer users or servers), between a pair of security gateways (e.g. routers or firewalls), or between a security gateway and a host.","title":"Security Terms"},{"location":"configure-tactic-assets/","text":"Asset Storage Proper management of assets and asset metadata are essential to managing the TACTIC service. Versioned assets are by far the most disk space consuming element of asset management. TACTIC can store its asset data in any filesystem path location. All that is required is that the tactic configuration file contains the path to a directory writable by the TACTIC service user. Local Access - In a simple configuration, the TACTIC service is enabled on the TACTIC host, and all assets checked in and checked out of TACTIC are stored on the local filesystem. Typically a user is created to run the TACTIC service, or an already assigned user is simply used to run the TACTIC service. Network Access - In an addition to the simple configuration, the TACTIC service is enabled on the tactic host and all assets checked in and checked out tactic are stored on a network mount. Typically a user is created to run the TACTIC service and be able to write to the network mount. TACTIC user permissions - It is important to note that in a network accessible filesystem, allocation of permissions are important only for the TACTIC user. Regular system users should not have access to the TACTIC assets directory. Browsable access to assets - During some conversions to the management of assets by TACTIC, a frequent request is for regular user access to the assets directory managed by TACTIC. There really is not the much to see in these directories as tactics naming convention for versioning of assets creates files and directories that are largely mysterious in their arrangement. Is very important that the files that are managed by tactic are not touched by regular users. Manipulating files or directories managed by tactic will definitely result in data loss. Regular users should not have writable access to tactic asset directories. Configure TACTIC The asset storage directory must be configured in the TACTIC configuration file. See Configuration Checklist for the location of this file. Set asset_base_dir as the directory where TACTIC will checkin files. You must restart the TACTIC service after changing the asset_base_dir. checkin ... asset_base_dir path/to/assets/dir /asset_base_dir ... /checkin Configure Webserver - Apache The webserver must also have access to the asset storage directory. For Apache, edit the provided tactic.conf file, /etc/httpd/conf.d/tactic.conf Change this: Directory /home/apache/assets Options FollowSymLinks AllowOverride None Order Allow,Deny Allow from All /Directory To: Directory path/to/assets/dir Options FollowSymLinks AllowOverride None Order Allow,Deny Allow from All /Directory Change this: Alias /assets /home/apache/assets To: Alias /assets path/to/assets/dir Restart Apache after making changes to the tactic.conf file.","title":"Assets Storage"},{"location":"configure-tactic-assets/#asset-storage","text":"Proper management of assets and asset metadata are essential to managing the TACTIC service. Versioned assets are by far the most disk space consuming element of asset management. TACTIC can store its asset data in any filesystem path location. All that is required is that the tactic configuration file contains the path to a directory writable by the TACTIC service user. Local Access - In a simple configuration, the TACTIC service is enabled on the TACTIC host, and all assets checked in and checked out of TACTIC are stored on the local filesystem. Typically a user is created to run the TACTIC service, or an already assigned user is simply used to run the TACTIC service. Network Access - In an addition to the simple configuration, the TACTIC service is enabled on the tactic host and all assets checked in and checked out tactic are stored on a network mount. Typically a user is created to run the TACTIC service and be able to write to the network mount. TACTIC user permissions - It is important to note that in a network accessible filesystem, allocation of permissions are important only for the TACTIC user. Regular system users should not have access to the TACTIC assets directory. Browsable access to assets - During some conversions to the management of assets by TACTIC, a frequent request is for regular user access to the assets directory managed by TACTIC. There really is not the much to see in these directories as tactics naming convention for versioning of assets creates files and directories that are largely mysterious in their arrangement. Is very important that the files that are managed by tactic are not touched by regular users. Manipulating files or directories managed by tactic will definitely result in data loss. Regular users should not have writable access to tactic asset directories.","title":"Asset Storage"},{"location":"configure-tactic-assets/#configure-tactic","text":"The asset storage directory must be configured in the TACTIC configuration file. See Configuration Checklist for the location of this file. Set asset_base_dir as the directory where TACTIC will checkin files. You must restart the TACTIC service after changing the asset_base_dir. checkin ... asset_base_dir path/to/assets/dir /asset_base_dir ... /checkin","title":"Configure TACTIC"},{"location":"configure-tactic-assets/#configure-webserver-apache","text":"The webserver must also have access to the asset storage directory. For Apache, edit the provided tactic.conf file, /etc/httpd/conf.d/tactic.conf Change this: Directory /home/apache/assets Options FollowSymLinks AllowOverride None Order Allow,Deny Allow from All /Directory To: Directory path/to/assets/dir Options FollowSymLinks AllowOverride None Order Allow,Deny Allow from All /Directory Change this: Alias /assets /home/apache/assets To: Alias /assets path/to/assets/dir Restart Apache after making changes to the tactic.conf file.","title":"Configure Webserver - Apache"},{"location":"configure-tactic/","text":"TACTIC Configuration File The TACTIC config file stores settings such as directory locations and email server information. Install This section defines the hostname for the server (if different from \"localhost\") as well as the temp directory to be used for TACTIC. The tmp_dir is where temporary files are stored as well as the TACTIC log files. install hostname localhost /hostname tmp_dir /home/tactic/tactic_temp /tmp_dir default_project default_project_code /default_project include_js /context/some_external_lib.js /include_js /install HOSTNAME This section defines the hostname for the server (if different from localhost ). The hostname is what TACTIC listens to. TMP_DIR The temp directory to be used by TACTIC. DEFAULT_PROJECT Default project when the user browse the TACTIC base url. INCLUDE_JS You can include one or more external js files you want to make use of separated by ,. Services This section defines information regarding the services external to TACTIC. services mailserver smtp.googlemail.com /mailserver mail_password password /mail_password mail_user tactic@southpawtech.com /mail_user mail_port 587 /mail_port mail_sender_disabled true /mail_sender_disabled mail_tls_enabled true /mail_tls_enabled mail_name TACTIC /mail_name mail_default_admin_email admin@southpawtech.com /mail_default_admin_email notify_user exceptions@southpawtech.com /notify_user python python3 /python python_path /home/apache/custom /python_path render_submit_class sites.racoon.modules.command.CustomRenderSubmit /render_submit_class process_count 3 /process_count thread_count 50 /thread_count process_time_alive 30 /process_time_alive system_class /system_class /services MAIL_SERVER The URL of the SMTP mail server MAIL_PASSWORD The password for accessing the SMTP mail server that requires authentication MAIL_USER The user name for accessing the SMTP mail server that requires authentication MAIL_PORT The port for the SMTP mail server (if different that 25) MAIL_SENDER_DISABLED Set as \"true\" to disable using the sender name in sending of email in case the email server does not allow sender\u2019s email not owned by the sender MAIL_TLS_ENABLED Set as \"true\" to enable TLS (Transport Layer Security) for the connection to email server mail_default_admin_email Default email for admin user is no email is set. This is used for password recovery functionality and notifications. notify_user Email to send system exceptions and errors to. PYTHON The root path of the Python installation. If your installation is using Python3, \"python3\" should be set as value. PYTHON_PATH The server-side location for client files. This location can also be mounted from a shared volume if you wish to maintain stricter server access for clients. For multiple paths, separate with | .e.g. /home/apache/custom|/home/apache/custom_two RENDER_SUBMIT_CLASS The class used for render submissions. PROCESS_COUNT The number of processes the TACTIC service would spawn. It needs to match the number of ports used in the load balancing scheme in the Apache configuration. THREAD_COUNT The number of worker threads generated for each instance of the TACTIC process. If not set, it defaults to 10 which is too low to handle rapid requests.. TACTIC\u2019s default is 50 on new installation. A good balance of process_count and thread_count can improve response time of the server. PROCESS_TIME_ALIVE The number of minutes a TACTIC process gets respawned. It helps with the memory consumption inherent with a long-running Python process. SYSTEM_CLASS Allows for an override some of the low level system functionality. For example 'mkdirs' and 'exists' Security This section defines information regarding the services external to TACTIC. security version 2 /version ticket_expiry 10 hour /ticket_expiry authenticate_mode default /authenticate_mode authenticate_class /authenticate_class authenticate_version 2 /authenticate_version case_insensitive_login false /case_insensitive_login max_login_attempt 3 /max_login_attempt account_lockout_duration 30 /account_lockout_duration auto_create_user false /auto_create_user api_require_password true /api_require_password api_password /api_password allow_guest false /allow_guest guest_mode restricted /guest_mode guest_url_allow /guest_view /guest_url_allow /security TICKET_EXPIRY The number of hours a login ticket expires after AUTHENTICATE_MODE default: This basically just looks at the tactic database for information. autocreate: This autocreates the first time and then leaves the information alone. cache: This caches the information to the tactic database on every login AUTHENTICATE_CLASS A full class path to override the default class pyasm.security.TacticAuthenticate . Note: Your custom class needs to override the method verify() which takes two arguments: login and password. AUTHENTICATE_VERSION 1 is the old way of authentication. 2 is the new way. CASE_INSENSITIVE_LOGIN If set to 'true', it allows case insensitive login name. When autocreate mode is used, all login entries created will have a lowercase login name. It can be used in combination with Active Directory setup. MAX_LOGIN_ATTEMPT Number of times login attempt can fail before account is locked out. ACCOUNT_LOCKOUT_DURATION Number of minutes a user account is locked out for failed login attempt if specified. AUTO_CREATE_USER Auto create user in TACTIC during authentication phase if it does not exist. (Deprecated: use authenticate_mode in new way of authentication) API_REQUIRE_PASSOWRD Client API script requires password to login or not API_PASSWORD A generic Client API password can be set here ALLOW_GUEST true or false can be set to allow guest to access without login GUEST_MODE full or restricted can be set. In restricted mode, a /guest relative URL is expected to be defined in Custom URL to restrict the guest to only see a particular view GUEST_URL_ALLOW In full mode, one can have multiple relative URLs predefined for guest, separated by |. Database database vendor PostgreSQL /vendor server localhost /server port /port user postgres /user password none /password sobject_database sthpw /sobject_database pool_max_connections 0 /pool_max_connections /database VENDOR The database vendor (software) the database will be installed on. SERVER The hostname of the server. This is localhost if TACTIC and the database are on the same server PORT The database connection port USER The user name for the database connection PASSWORD The password for the database connection. SOBJECT_DATABASE The database where SObject definitions will be stores POOL_MAX_CONNECTIONS The pool of connections available for connecting to the database. 0 is recommended for PostgreSQL implementation Perforce perforce web_dir perforce /web_dir p4 p4 /p4 port 1666 /port /perforce WEB_DIR The webdir for the perforce connection. P4 PORT The port to be used for connection to perforce. Look This setting provides a method of setting the TACTIC skin in the server for all users. In this example, the 'BON_NOCHE' palette specified: look palette BON_NOCHE /palette /look Other available palettes are 'AQUA', 'DARK', 'BRIGHT', 'DEFAULT', 'SILVER', 'AVIATOR', and 'ORIGAMI'. Alternatively, the whole palette can be customized as follows: look palette { 'color': '#000000', # main font color 'color2': '#FFFFFF', # secondary font color 'color3': '#FFFFFF', # tertiary font color 'background': '#FDEEA7', # main background color 'background2': '#1A9481', # secondary background color 'background3': '#003D5c', # tertiary background color 'border': '#666666' # main border color } /palette /palette /look The side bar color may not change right away until the next TACTIC service restart. PALETTE The default palette setting for all TACTIC users. Checkin TACTIC uses the following directory and path settings for internal and client interaction. They are included in the tag (for checkins). VERSIONLESS_MODE COPY or SYMLINK: Turn on versionless mode for checkins for all projects. To set the versionless mode per project, go to PROJECT ADMIN \u2192 PROJECT SETTINGS and add a the key VERSIONLESS_MODE and the value: COPY or SYMLINK. ASSET_BASE_DIR The directory where the assets are stored in the TACTIC server. WEB_BASE_DIR The root URL that maps the 'asset_base_dir' directory WIN32_LOCAL_BASE_DIR The base directory in Windows client machines LINUX_LOCAL_BASE_DIR The base directory in Linux client machines WIN32_SANDBOX_DIR The default sandbox directory in the Windows client machines (it can be overridden by Remote Repo) LINUX_SANDBOX_DIR The default sandbox directory in the Linux client machines (it can be overridden by Remote Repo) WIN32_CLIENT_REPO_DIR Maps the asset_base_dir directory as seen by the Windows client. For example, if asset_base_dir is on a Linux server with a path like /home/apache/assets but from the Windows client, it is mapped as Z:/assets , then Z:/assets should be the value for this setting. By default, this path is empty because the system assumes the client and server are on the same Windows machine. LINUX_CLIENT_REPO_DIR Same as 'win32_client_repo_dir' except it is from the perspective of a Linux client machine WIN32_CLIENT_HANDOFF_DIR Windows client-side handoff directory for Client API transactions. (Find out more about the handoff directory below.) WIN32_SERVER_HANDOFF_DIR Windows server-side handoff directory for Client API transactions LINUX_CLIENT_HANDOFF_DIR Linux client-side handoff directory for Client API transactions LINUX_SERVER_HANDOFF_DIR Linux server-side handoff directory for Client API transactions SUDO_NO_PASSWORD It controls whether sudo can be run to change the user id and group id of the files checked in. It is particularly important if you want to ensure files checked in to the TACTIC repository are owned by TACTIC and not overwritable by just any users. If set to true, no password should be enabled for the user TACTIC is run as in the OS. e.g. For Fedora, assuming you have sudo installed: In the file /etc/sudoers, the following line should be uncommented: %wheel ALL=(ALL) NOPASSWD: ALL In the file /etc/group, apache should be added to the group wheel wheel:x:10:root,apache VERSION_PADDING padding of 3 or more can be set for checked-in files The Handoff Directories Handoff directories can be seen by both the server and the client machines. They are used for 3D checkins and client API interactions, and are important for specifying how the client and server sides see the same location. For example, if you have the location //192.168.0.105/handoff available on your network and it is mounted as /home/apache/handoff on a server, then it would be important to include the following entries: win32_client_handoff_dir //192.168.0.105/handoff /win32_client_handoff_dir win32_server_handoff_dir /win32_server_handoff_dir linux_client_handoff_dir /linux_client_handoff_dir linux_server_handoff_dir /home/apache/handoff /linux_server_handoff_dir Directory Configuration Examples Example 1 The assets directory is located on the TACTIC server and allows for read-only access from client machines in the local subnet. The assets directory is located on the TACTIC server and allows for read-only access from client machines in the local subnet. The handoff directory is located on the TACTIC server and allows for read/write access from client machines in the local subnet The Windows and Linux 'client_repo_dir' looks directly to the server for the available \"assets\" share The Windows and Linux 'client_handoff_dir' looks directly to the server for the available \"handoff\" share checkin asset_base_dir /home/apache/assets /asset_base_dir web_base_dir /assets /web_base_dir win32_local_base_dir C:/sthpw /win32_local_base_dir linux_local_base_dir /tmp/sthpw /linux_local_base_dir win32_sandbox_dir C:/sthpw/sandbox /win32_sandbox_dir linux_sandbox_dir /tmp/sthpw/sandbox /linux_sandbox_dir win32_client_repo_dir //192.168.0.105/apache/assets /win32_client_repo_dir linux_client_repo_dir /usr/assets /linux_client_repo_dir win32_client_handoff_dir //192.168.0.105/apache/handoff win32_client_handoff_dir win32_server_handoff_dir /win32_server_handoff_dir linux_client_handoff_dir /home/apache/handoff /linux_client_handoff_dir linux_server_handoff_dir /home/apache/handoff /linux_server_handoff_dir version_padding 3 /version_padding /checkin Example 2 The assets directory is located on another server and mounted locally on the TACTIC server to /mnt1/assets. The Windows and Linux 'client_repo_dir' is mapped/mounted to the TACTIC 'asset_base_dir' The Windows and Linux 'client_handoff_dir' is mapped/mounted to the TACTIC 'server_handoff_dir' checkin asset_base_dir /mnt1/assets /asset_base_dir web_base_dir /assets /web_base_dir win32_local_base_dir C:/sthpw /win32_local_base_dir linux_local_base_dir /tmp/sthpw /linux_local_base_dir win32_sandbox_dir C:/sthpw/sandbox /win32_sandbox_dir linux_sandbox_dir /tmp/sthpw/sandbox /linux_sandbox_dir win32_client_repo_dir z:/assets /win32_client_repo_dir linux_client_repo_dir /assets /linux_client_repo_dir win32_client_handoff_dir z:/tactic_handoff win32_client_handoff_dir win32_server_handoff_dir /win32_server_handoff_dir linux_client_handoff_dir /tactic_handoff /linux_client_handoff_dir linux_server_handoff_dir /home/apache/tactic_handoff /linux_server_handoff_dir version_padding 3 /version_padding /checkin","title":"Configuration Directives"},{"location":"configure-tactic/#tactic-configuration-file","text":"The TACTIC config file stores settings such as directory locations and email server information.","title":"TACTIC Configuration File"},{"location":"configure-tactic/#install","text":"This section defines the hostname for the server (if different from \"localhost\") as well as the temp directory to be used for TACTIC. The tmp_dir is where temporary files are stored as well as the TACTIC log files. install hostname localhost /hostname tmp_dir /home/tactic/tactic_temp /tmp_dir default_project default_project_code /default_project include_js /context/some_external_lib.js /include_js /install HOSTNAME This section defines the hostname for the server (if different from localhost ). The hostname is what TACTIC listens to. TMP_DIR The temp directory to be used by TACTIC. DEFAULT_PROJECT Default project when the user browse the TACTIC base url. INCLUDE_JS You can include one or more external js files you want to make use of separated by ,.","title":"Install"},{"location":"configure-tactic/#services","text":"This section defines information regarding the services external to TACTIC. services mailserver smtp.googlemail.com /mailserver mail_password password /mail_password mail_user tactic@southpawtech.com /mail_user mail_port 587 /mail_port mail_sender_disabled true /mail_sender_disabled mail_tls_enabled true /mail_tls_enabled mail_name TACTIC /mail_name mail_default_admin_email admin@southpawtech.com /mail_default_admin_email notify_user exceptions@southpawtech.com /notify_user python python3 /python python_path /home/apache/custom /python_path render_submit_class sites.racoon.modules.command.CustomRenderSubmit /render_submit_class process_count 3 /process_count thread_count 50 /thread_count process_time_alive 30 /process_time_alive system_class /system_class /services MAIL_SERVER The URL of the SMTP mail server MAIL_PASSWORD The password for accessing the SMTP mail server that requires authentication MAIL_USER The user name for accessing the SMTP mail server that requires authentication MAIL_PORT The port for the SMTP mail server (if different that 25) MAIL_SENDER_DISABLED Set as \"true\" to disable using the sender name in sending of email in case the email server does not allow sender\u2019s email not owned by the sender MAIL_TLS_ENABLED Set as \"true\" to enable TLS (Transport Layer Security) for the connection to email server mail_default_admin_email Default email for admin user is no email is set. This is used for password recovery functionality and notifications. notify_user Email to send system exceptions and errors to. PYTHON The root path of the Python installation. If your installation is using Python3, \"python3\" should be set as value. PYTHON_PATH The server-side location for client files. This location can also be mounted from a shared volume if you wish to maintain stricter server access for clients. For multiple paths, separate with | .e.g. /home/apache/custom|/home/apache/custom_two RENDER_SUBMIT_CLASS The class used for render submissions. PROCESS_COUNT The number of processes the TACTIC service would spawn. It needs to match the number of ports used in the load balancing scheme in the Apache configuration. THREAD_COUNT The number of worker threads generated for each instance of the TACTIC process. If not set, it defaults to 10 which is too low to handle rapid requests.. TACTIC\u2019s default is 50 on new installation. A good balance of process_count and thread_count can improve response time of the server. PROCESS_TIME_ALIVE The number of minutes a TACTIC process gets respawned. It helps with the memory consumption inherent with a long-running Python process. SYSTEM_CLASS Allows for an override some of the low level system functionality. For example 'mkdirs' and 'exists'","title":"Services"},{"location":"configure-tactic/#security","text":"This section defines information regarding the services external to TACTIC. security version 2 /version ticket_expiry 10 hour /ticket_expiry authenticate_mode default /authenticate_mode authenticate_class /authenticate_class authenticate_version 2 /authenticate_version case_insensitive_login false /case_insensitive_login max_login_attempt 3 /max_login_attempt account_lockout_duration 30 /account_lockout_duration auto_create_user false /auto_create_user api_require_password true /api_require_password api_password /api_password allow_guest false /allow_guest guest_mode restricted /guest_mode guest_url_allow /guest_view /guest_url_allow /security TICKET_EXPIRY The number of hours a login ticket expires after AUTHENTICATE_MODE default: This basically just looks at the tactic database for information. autocreate: This autocreates the first time and then leaves the information alone. cache: This caches the information to the tactic database on every login AUTHENTICATE_CLASS A full class path to override the default class pyasm.security.TacticAuthenticate . Note: Your custom class needs to override the method verify() which takes two arguments: login and password. AUTHENTICATE_VERSION 1 is the old way of authentication. 2 is the new way. CASE_INSENSITIVE_LOGIN If set to 'true', it allows case insensitive login name. When autocreate mode is used, all login entries created will have a lowercase login name. It can be used in combination with Active Directory setup. MAX_LOGIN_ATTEMPT Number of times login attempt can fail before account is locked out. ACCOUNT_LOCKOUT_DURATION Number of minutes a user account is locked out for failed login attempt if specified. AUTO_CREATE_USER Auto create user in TACTIC during authentication phase if it does not exist. (Deprecated: use authenticate_mode in new way of authentication) API_REQUIRE_PASSOWRD Client API script requires password to login or not API_PASSWORD A generic Client API password can be set here ALLOW_GUEST true or false can be set to allow guest to access without login GUEST_MODE full or restricted can be set. In restricted mode, a /guest relative URL is expected to be defined in Custom URL to restrict the guest to only see a particular view GUEST_URL_ALLOW In full mode, one can have multiple relative URLs predefined for guest, separated by |.","title":"Security"},{"location":"configure-tactic/#database","text":"database vendor PostgreSQL /vendor server localhost /server port /port user postgres /user password none /password sobject_database sthpw /sobject_database pool_max_connections 0 /pool_max_connections /database VENDOR The database vendor (software) the database will be installed on. SERVER The hostname of the server. This is localhost if TACTIC and the database are on the same server PORT The database connection port USER The user name for the database connection PASSWORD The password for the database connection. SOBJECT_DATABASE The database where SObject definitions will be stores POOL_MAX_CONNECTIONS The pool of connections available for connecting to the database. 0 is recommended for PostgreSQL implementation","title":"Database"},{"location":"configure-tactic/#perforce","text":"perforce web_dir perforce /web_dir p4 p4 /p4 port 1666 /port /perforce WEB_DIR The webdir for the perforce connection. P4 PORT The port to be used for connection to perforce.","title":"Perforce"},{"location":"configure-tactic/#look","text":"This setting provides a method of setting the TACTIC skin in the server for all users. In this example, the 'BON_NOCHE' palette specified: look palette BON_NOCHE /palette /look Other available palettes are 'AQUA', 'DARK', 'BRIGHT', 'DEFAULT', 'SILVER', 'AVIATOR', and 'ORIGAMI'. Alternatively, the whole palette can be customized as follows: look palette { 'color': '#000000', # main font color 'color2': '#FFFFFF', # secondary font color 'color3': '#FFFFFF', # tertiary font color 'background': '#FDEEA7', # main background color 'background2': '#1A9481', # secondary background color 'background3': '#003D5c', # tertiary background color 'border': '#666666' # main border color } /palette /palette /look The side bar color may not change right away until the next TACTIC service restart. PALETTE The default palette setting for all TACTIC users.","title":"Look"},{"location":"configure-tactic/#checkin","text":"TACTIC uses the following directory and path settings for internal and client interaction. They are included in the tag (for checkins). VERSIONLESS_MODE COPY or SYMLINK: Turn on versionless mode for checkins for all projects. To set the versionless mode per project, go to PROJECT ADMIN \u2192 PROJECT SETTINGS and add a the key VERSIONLESS_MODE and the value: COPY or SYMLINK. ASSET_BASE_DIR The directory where the assets are stored in the TACTIC server. WEB_BASE_DIR The root URL that maps the 'asset_base_dir' directory WIN32_LOCAL_BASE_DIR The base directory in Windows client machines LINUX_LOCAL_BASE_DIR The base directory in Linux client machines WIN32_SANDBOX_DIR The default sandbox directory in the Windows client machines (it can be overridden by Remote Repo) LINUX_SANDBOX_DIR The default sandbox directory in the Linux client machines (it can be overridden by Remote Repo) WIN32_CLIENT_REPO_DIR Maps the asset_base_dir directory as seen by the Windows client. For example, if asset_base_dir is on a Linux server with a path like /home/apache/assets but from the Windows client, it is mapped as Z:/assets , then Z:/assets should be the value for this setting. By default, this path is empty because the system assumes the client and server are on the same Windows machine. LINUX_CLIENT_REPO_DIR Same as 'win32_client_repo_dir' except it is from the perspective of a Linux client machine WIN32_CLIENT_HANDOFF_DIR Windows client-side handoff directory for Client API transactions. (Find out more about the handoff directory below.) WIN32_SERVER_HANDOFF_DIR Windows server-side handoff directory for Client API transactions LINUX_CLIENT_HANDOFF_DIR Linux client-side handoff directory for Client API transactions LINUX_SERVER_HANDOFF_DIR Linux server-side handoff directory for Client API transactions SUDO_NO_PASSWORD It controls whether sudo can be run to change the user id and group id of the files checked in. It is particularly important if you want to ensure files checked in to the TACTIC repository are owned by TACTIC and not overwritable by just any users. If set to true, no password should be enabled for the user TACTIC is run as in the OS. e.g. For Fedora, assuming you have sudo installed: In the file /etc/sudoers, the following line should be uncommented: %wheel ALL=(ALL) NOPASSWD: ALL In the file /etc/group, apache should be added to the group wheel wheel:x:10:root,apache VERSION_PADDING padding of 3 or more can be set for checked-in files","title":"Checkin"},{"location":"configure-tactic/#the-handoff-directories","text":"Handoff directories can be seen by both the server and the client machines. They are used for 3D checkins and client API interactions, and are important for specifying how the client and server sides see the same location. For example, if you have the location //192.168.0.105/handoff available on your network and it is mounted as /home/apache/handoff on a server, then it would be important to include the following entries: win32_client_handoff_dir //192.168.0.105/handoff /win32_client_handoff_dir win32_server_handoff_dir /win32_server_handoff_dir linux_client_handoff_dir /linux_client_handoff_dir linux_server_handoff_dir /home/apache/handoff /linux_server_handoff_dir","title":"The Handoff Directories"},{"location":"configure-tactic/#directory-configuration-examples","text":"Example 1 The assets directory is located on the TACTIC server and allows for read-only access from client machines in the local subnet. The assets directory is located on the TACTIC server and allows for read-only access from client machines in the local subnet. The handoff directory is located on the TACTIC server and allows for read/write access from client machines in the local subnet The Windows and Linux 'client_repo_dir' looks directly to the server for the available \"assets\" share The Windows and Linux 'client_handoff_dir' looks directly to the server for the available \"handoff\" share checkin asset_base_dir /home/apache/assets /asset_base_dir web_base_dir /assets /web_base_dir win32_local_base_dir C:/sthpw /win32_local_base_dir linux_local_base_dir /tmp/sthpw /linux_local_base_dir win32_sandbox_dir C:/sthpw/sandbox /win32_sandbox_dir linux_sandbox_dir /tmp/sthpw/sandbox /linux_sandbox_dir win32_client_repo_dir //192.168.0.105/apache/assets /win32_client_repo_dir linux_client_repo_dir /usr/assets /linux_client_repo_dir win32_client_handoff_dir //192.168.0.105/apache/handoff win32_client_handoff_dir win32_server_handoff_dir /win32_server_handoff_dir linux_client_handoff_dir /home/apache/handoff /linux_client_handoff_dir linux_server_handoff_dir /home/apache/handoff /linux_server_handoff_dir version_padding 3 /version_padding /checkin Example 2 The assets directory is located on another server and mounted locally on the TACTIC server to /mnt1/assets. The Windows and Linux 'client_repo_dir' is mapped/mounted to the TACTIC 'asset_base_dir' The Windows and Linux 'client_handoff_dir' is mapped/mounted to the TACTIC 'server_handoff_dir' checkin asset_base_dir /mnt1/assets /asset_base_dir web_base_dir /assets /web_base_dir win32_local_base_dir C:/sthpw /win32_local_base_dir linux_local_base_dir /tmp/sthpw /linux_local_base_dir win32_sandbox_dir C:/sthpw/sandbox /win32_sandbox_dir linux_sandbox_dir /tmp/sthpw/sandbox /linux_sandbox_dir win32_client_repo_dir z:/assets /win32_client_repo_dir linux_client_repo_dir /assets /linux_client_repo_dir win32_client_handoff_dir z:/tactic_handoff win32_client_handoff_dir win32_server_handoff_dir /win32_server_handoff_dir linux_client_handoff_dir /tactic_handoff /linux_client_handoff_dir linux_server_handoff_dir /home/apache/tactic_handoff /linux_server_handoff_dir version_padding 3 /version_padding /checkin","title":"Directory Configuration Examples"},{"location":"database-configuration-postgresql/","text":"PostgreSQL is used as the database co-service in the following sample configuration. PostgreSQL has only two configuration files that are required to be examined in order to function with TACTIC; pg_hba.conf and postgresql.conf pg_hba.conf The pg_hba.conf configuration file contains a list of users and hosts with clearance levels. In the default pg_hba.conf file that comes with TACTIC, the network trust level is set for the most open access by the localhost; # TYPE DATABASE USER CIDR-ADDRESS METHOD local all all trust # IPv4 local connections: host all all 127.0.0.1/32 trust # IPv6 local connections: host all all ::1/128 trust In this example, all local connections to PostgreSQL are trusted. This configuration matches the correct configuration required by a single machine. host all all TACTIC_HOST_IP_ADDR trust postgresql.conf The postgresql.conf configuration file has a setting that will allow the PostgreSQL service to bind to the particular interface required. Of concern is the \"listen_addresses\" attribute. listen_addresses = 'localhost' By default, the PostgreSQL service is only bound to the localhost. This is fine for single machine operation of the TACTIC service. listen_addresses = '*' This setting or specific IP addresses can be used if the DB service is not on the same machine as the TACTIC service","title":"PostgreSQL"},{"location":"database-configuration-postgresql/#pg95hbaconf","text":"The pg_hba.conf configuration file contains a list of users and hosts with clearance levels. In the default pg_hba.conf file that comes with TACTIC, the network trust level is set for the most open access by the localhost; # TYPE DATABASE USER CIDR-ADDRESS METHOD local all all trust # IPv4 local connections: host all all 127.0.0.1/32 trust # IPv6 local connections: host all all ::1/128 trust In this example, all local connections to PostgreSQL are trusted. This configuration matches the correct configuration required by a single machine. host all all TACTIC_HOST_IP_ADDR trust","title":"pg_hba.conf"},{"location":"database-configuration-postgresql/#postgresqlconf","text":"The postgresql.conf configuration file has a setting that will allow the PostgreSQL service to bind to the particular interface required. Of concern is the \"listen_addresses\" attribute. listen_addresses = 'localhost' By default, the PostgreSQL service is only bound to the localhost. This is fine for single machine operation of the TACTIC service. listen_addresses = '*' This setting or specific IP addresses can be used if the DB service is not on the same machine as the TACTIC service","title":"postgresql.conf"},{"location":"database-configuration/","text":"TACTIC Database Configuration TACTIC supports a variety of database types, including, PostgreSQL MySQL SQLServer SQLite The database connection is configured in the TACTIC configuration file. See Configuration Directives Database for configuration of the TACTIC database connection. Change Databases By default TACTIC will look at localhost to the database. This is the simplest implementation and most installations will have the database on the same physical server as the TACTIC application servers. However, in scaling up TACTIC, it may become necessary to separate the database server from the TACTIC applications servers. TACTIC can be configured to look at an external database by connecting through sockets of TCP/IP. This can be set in the TACTIC configuration file. While it is possible to edit this file manually, it is often simpler to use the provided utility found in: TACTIC_INSTALL_DIR /src/bin/util/change_db_info.py This command line script will ask a series of questions and update the appropriate configuration file Usage: python change_db_info.py When executing, the script will ask configuration questions and show a default value in brackets. If the default is sufficient, merely press enter without entering anything in will accept the default. Below is a sample output where all the default values are accepted: TACTIC Database Configuration Please enter the database vendor (PostgreSQL or Oracle): (PostgreSQL) \u2192 Please enter database server hostname or IP address: (localhost) \u2192 Please enter user name accessing the database: (postgres) \u2192 Please enter database password: (ENTER to keep password, ' EMPTY ' for empty password) Enter Password \u2192 Vendor: [PostgreSQL] Server: [localhost] User: [postgres] Save to config (N/y) \u2192 Once the values have been saved, a restart of TACTIC is required to start using the new database configuration.","title":"Database"},{"location":"database-configuration/#tactic-database-configuration","text":"TACTIC supports a variety of database types, including, PostgreSQL MySQL SQLServer SQLite The database connection is configured in the TACTIC configuration file. See Configuration Directives Database for configuration of the TACTIC database connection.","title":"TACTIC Database Configuration"},{"location":"database-configuration/#change-databases","text":"By default TACTIC will look at localhost to the database. This is the simplest implementation and most installations will have the database on the same physical server as the TACTIC application servers. However, in scaling up TACTIC, it may become necessary to separate the database server from the TACTIC applications servers. TACTIC can be configured to look at an external database by connecting through sockets of TCP/IP. This can be set in the TACTIC configuration file. While it is possible to edit this file manually, it is often simpler to use the provided utility found in: TACTIC_INSTALL_DIR /src/bin/util/change_db_info.py This command line script will ask a series of questions and update the appropriate configuration file Usage: python change_db_info.py When executing, the script will ask configuration questions and show a default value in brackets. If the default is sufficient, merely press enter without entering anything in will accept the default. Below is a sample output where all the default values are accepted: TACTIC Database Configuration Please enter the database vendor (PostgreSQL or Oracle): (PostgreSQL) \u2192 Please enter database server hostname or IP address: (localhost) \u2192 Please enter user name accessing the database: (postgres) \u2192 Please enter database password: (ENTER to keep password, ' EMPTY ' for empty password) Enter Password \u2192 Vendor: [PostgreSQL] Server: [localhost] User: [postgres] Save to config (N/y) \u2192 Once the values have been saved, a restart of TACTIC is required to start using the new database configuration.","title":"Change Databases"},{"location":"deploy-tactic-checklist/","text":"TACTIC Configuration Checklist Checklist For a proper production deployment of TACTIC, the following configurations must be considered in the context of your business needs: Assets Storage Database Webserver SSL Authentication Webserver for notifications The Server Configuration section of this documentation provides advanced configuration information for each of these areas. Further, it is recommended that system administrators read the following sections: Scalability: Network architecture examples and load balancing configuration Maintenance: Configuring backups and logging Location of Configuration File Most advanced server configuration is done in the TACTIC configuration file. The configuration file is typically found on Linux systems at, /opt/tactic/tactic_data/config/tactic-conf.xml and on Windows systems at, C:\\ProgramData\\Southpaw\\Tactic\\config\\tactic-conf.xml Southpaw supplies the TACTIC config file as a template on installation. Once installed, this file can be modified to reflect any of the options described in the sections below. You must restart the TACTIC service for changes to take effect. System Config tool Most of the parameters can be modified in the UI through Global System Config as well. If an option tag does not exist in a particular section in your config file, TACTIC will assume a default or it can simply be added in.","title":"Configuration Checklist"},{"location":"deploy-tactic-checklist/#tactic-configuration-checklist","text":"","title":"TACTIC Configuration Checklist"},{"location":"deploy-tactic-checklist/#checklist","text":"For a proper production deployment of TACTIC, the following configurations must be considered in the context of your business needs: Assets Storage Database Webserver SSL Authentication Webserver for notifications The Server Configuration section of this documentation provides advanced configuration information for each of these areas. Further, it is recommended that system administrators read the following sections: Scalability: Network architecture examples and load balancing configuration Maintenance: Configuring backups and logging","title":"Checklist"},{"location":"deploy-tactic-checklist/#location-of-configuration-file","text":"Most advanced server configuration is done in the TACTIC configuration file. The configuration file is typically found on Linux systems at, /opt/tactic/tactic_data/config/tactic-conf.xml and on Windows systems at, C:\\ProgramData\\Southpaw\\Tactic\\config\\tactic-conf.xml Southpaw supplies the TACTIC config file as a template on installation. Once installed, this file can be modified to reflect any of the options described in the sections below. You must restart the TACTIC service for changes to take effect.","title":"Location of Configuration File"},{"location":"deploy-tactic-checklist/#system-config-tool","text":"Most of the parameters can be modified in the UI through Global System Config as well. If an option tag does not exist in a particular section in your config file, TACTIC will assume a default or it can simply be added in.","title":"System Config tool"},{"location":"deploy-tactic-scalability-configuration-examples/","text":"TACTIC Scalable Configuration Examples TACTIC and its co-services can be distributed over multiple machines. This can be specific combinations of TACTIC and co-services. For purposes of instruction and brevity, the configuration examples are not targeted towards particular multiple machine solutions; rather, the configuration examples can be altered to suit the individual environment. Here are some examples: HTTP server, DB, and TACTIC server HTTP server, HTTP server, DB server, and TACTIC server HTTP server, TACTIC server 1, TACTIC server 2, and DB server, and so on. Example Configuration: One Server Single machine for small scale environment, limited usage all services on one machine Example Configuration: Two Servers Two machines to spread workload. HTTP and TACTIC server DB server Example Configuration: Three Servers For larger environments where automated usage and heavy reporting usage by users through the GUI. HTTP DB server TACTIC server 1 TACTIC server 2","title":"Configuration Examples"},{"location":"deploy-tactic-scalability-configuration-examples/#tactic-scalable-configuration-examples","text":"TACTIC and its co-services can be distributed over multiple machines. This can be specific combinations of TACTIC and co-services. For purposes of instruction and brevity, the configuration examples are not targeted towards particular multiple machine solutions; rather, the configuration examples can be altered to suit the individual environment. Here are some examples: HTTP server, DB, and TACTIC server HTTP server, HTTP server, DB server, and TACTIC server HTTP server, TACTIC server 1, TACTIC server 2, and DB server, and so on. Example Configuration: One Server Single machine for small scale environment, limited usage all services on one machine Example Configuration: Two Servers Two machines to spread workload. HTTP and TACTIC server DB server Example Configuration: Three Servers For larger environments where automated usage and heavy reporting usage by users through the GUI. HTTP DB server TACTIC server 1 TACTIC server 2","title":"TACTIC Scalable Configuration Examples"},{"location":"deploy-tactic-scalability-planning/","text":"Scalable TACTIC Deployment Planning The stages of a TACTIC deployment are: Determining usage requirements Determining hardware requirements Determining TACTIC Service and Co-Service Locations Post Deployment TACTIC upscaling Planning Notes Determining TACTIC Usage Requirements One of the first questions asked in a TACTIC deployment is \"what kind of deployment is required?\" This is a hard question to answer unless it is known beforehand exactly how TACTIC will be used. Since every TACTIC deployment is customized by the licensee, there is really no way to calculate accurately the type of load that will eventually be placed on the TACTIC server. Fortunately, due to TACTIC\u2019s scalable architecture, a TACTIC deployment can be scaled up easily when there are unforeseen increases in usage. Service Requirements In a TACTIC deployment, running the TACTIC service is the primary function of the TACTIC host machine. The co-services can be deployed to the location most appropriate for the environment. However, to ensure scalability and high availability, the co-services should not be deployed on the TACTIC host for any but the smallest of deployments. TACTIC uses four major services and co-services in its operation: TACTIC service: provides the API and GUI widget system. Database co-service: provides indexing and storage for asset meta data. HTTP co-service: provides delivery (and return) of raw asset data. Assets storage co-service: provides storage and back-up capabilities of raw asset data. Limitations With TACTIC, you can simply add hardware and load-balance it to handle more and more requests. You can expand scalability in this way until the database server itself becomes the bottleneck. Fortunately, with the introduction of multi-CPU and multi-core machines, database limits are extremely high. User Interfaces: For applications with end-user interfaces (especially those using widgets, where complex interface elements need to be constructed), the load required to process TACTIC requests will remain much greater than the load required to process SQL calls, no matter how much hardware is added to handle such requests. Client APIs: Client APIs provide a much thinner layer to the database and so are optimized to handle lower level requests very rapidly. However, because API calls are typically used for automated processes, they can generate a large number of requests quickly, creating a heavy load on the TACTIC server. Load balancing: this is especially important for render farms, which can be massive in scale with thousands to tens of thousands of cores. It ensures that the high volume of requests is evenly distributed to all of the available TACTIC processes. The exact number of processes required to handle the high volume is highly dependent on the number of requests made and to the complexity of the requests. However, because load balancing will provide near-linear scalability, the number of processes can be increased to a level that is sufficient for the number of requests being demanded of the client API. Report generation: TACTIC\u2019s reporting system is powerful and comprehensive, and the load on host CPUs can increase significantly when complex reports are being run. Administrators should focus on report generation when investigating load utilization. Checkins: There are two kinds of complexity when considering scalability for checkins: Large Checkins: TACTIC offers a wide variety of checkin configurations that will accommodate large bandwidth, large files, and complex dependency between files. Many Checkins: There are few concerns with a large number of checkins. The number of checkins that occur even in the largest of productions is small compared to the limits of a database. Determining TACTIC Hardware Requirements Hardware Overview TACTIC works well with most types of hardware, but industry-standard server level components are highly recommended. The exact configuration will depend on the specific needs of your facility. For most deployments, TACTIC can be installed on the typical commodity hardware used by most small and large enterprises. TACTIC is a purpose-built relational database at its core, and your hardware choices can reflect that fact. TACTIC service requirements: Assuming TACTIC is the only service on the host, the minimal requirements for a production-level deployment of a TACTIC host are: CPU: dual core Memory: 4G Disk space needed for TACTIC to run on: 10G (assets should be stored elsewhere, on an enterprise quality server) These requirements represent the recommended absolute minimal hardware required to run a basic TACTIC service in a production environment. For development and testing, TACTIC will run on most hardware including laptops. Asset storage: It is highly recommended that assets be stored on an enterprise-quality, high-availability server, and not on the TACTIC host. RAID Options: You can use various RAID configurations to maximize reliability and performance. For example, you could locate the Operating System on one physical drive, and the database files on another. Or you could locate the database on a RAID array. Asset meta data: The amount of asset meta data stored on disk by TACTIC is insignificant to today\u2019s hardware specifications and need not be a consideration when choosing a server: reliability and performance should be higher concerns. Determining TACTIC Service Locations Segregating Services TACTIC offers a number of different services for different purposes. For example, the TACTIC server can serve out complex widgets, serve out large numbers of client API requests and perform large, complex check-ins. Each type of service has distinct needs, so it is often beneficial to segregate the services to be independent of each other. This allows each service to operate within a pool of assigned resources without affecting (or being affected by) the other services. For example, if a render farm used a client API script that heavily loaded the TACTIC server and its requests were shared with user interface requests, users would experience inconsistent (and occasionally unacceptably slow) response times. This experience would cause frustration amongst users, so it would be necessary to segregate their user interface service from the render farm\u2019s client API service. Each type of service has very different demands and needs, so segregating services also allows you to tune the hardware and software to the specifications required for the service they are handling. Ultimately, you can maximize the use of your available resources. How Load Balancing Works Load balancing distributes requests to various TACTIC processes using an algorithm that determines which request is delegated to which process. The default algorithm is a very simple randomizer. For most applications, the default algorithm works perfectly fine. It is left to chance whether a particular request will be assigned to a heavily loaded process or one that is sitting idle, so there may be inconsistent performance depending on load and availability of TACTIC processes not already loaded. IIS delegation algorithms (on MSWeb Server) are also supported. For Apache, an example algorithm is provided you can customize to your needs. Each process, by default, is assigned two simultaneous requests at most. This limit has proven in production to be the most effective because it prevents the Python process itself from being overloaded waiting for required I/O operations. If there are excess requests waiting to be processed, they are kept in a queue and assigned sequentially to processes as they become available. Python\u2019s GIL (global interpreter lock) prevents any Python process from using more than one CPU or core, so the number of threads available for any given process is limited. True scalability is achieved by load-balancing requests over multiple processes. This method scales seamlessly and linearly over multiple cores, multiple CPUs and ultimately over multiple physical servers with only simple configuration changes. Post Deployment TACTIC Upscaling Scenarios TACTIC is easily upscaled in most post deployment scenarios. Upscaling does not require any significant downtime of TACTIC services. Some scenario examples follow, with bullet points outlining why these possible solutions would be followed: Increasing number of TACTIC processes on a single machine** Splitting TACTIC into multiple servers from one server** Easy way to upscale/troubleshoot Heavy reporting Many users/API calls from automated processes Splitting the HTTP co-service into multiple servers from one server** Many Checkins Large Checkins","title":"Deployment Preparation"},{"location":"deploy-tactic-scalability-planning/#scalable-tactic-deployment-planning","text":"The stages of a TACTIC deployment are: Determining usage requirements Determining hardware requirements Determining TACTIC Service and Co-Service Locations Post Deployment TACTIC upscaling","title":"Scalable TACTIC Deployment Planning"},{"location":"deploy-tactic-scalability-planning/#planning-notes","text":"Determining TACTIC Usage Requirements One of the first questions asked in a TACTIC deployment is \"what kind of deployment is required?\" This is a hard question to answer unless it is known beforehand exactly how TACTIC will be used. Since every TACTIC deployment is customized by the licensee, there is really no way to calculate accurately the type of load that will eventually be placed on the TACTIC server. Fortunately, due to TACTIC\u2019s scalable architecture, a TACTIC deployment can be scaled up easily when there are unforeseen increases in usage. Service Requirements In a TACTIC deployment, running the TACTIC service is the primary function of the TACTIC host machine. The co-services can be deployed to the location most appropriate for the environment. However, to ensure scalability and high availability, the co-services should not be deployed on the TACTIC host for any but the smallest of deployments. TACTIC uses four major services and co-services in its operation: TACTIC service: provides the API and GUI widget system. Database co-service: provides indexing and storage for asset meta data. HTTP co-service: provides delivery (and return) of raw asset data. Assets storage co-service: provides storage and back-up capabilities of raw asset data. Limitations With TACTIC, you can simply add hardware and load-balance it to handle more and more requests. You can expand scalability in this way until the database server itself becomes the bottleneck. Fortunately, with the introduction of multi-CPU and multi-core machines, database limits are extremely high. User Interfaces: For applications with end-user interfaces (especially those using widgets, where complex interface elements need to be constructed), the load required to process TACTIC requests will remain much greater than the load required to process SQL calls, no matter how much hardware is added to handle such requests. Client APIs: Client APIs provide a much thinner layer to the database and so are optimized to handle lower level requests very rapidly. However, because API calls are typically used for automated processes, they can generate a large number of requests quickly, creating a heavy load on the TACTIC server. Load balancing: this is especially important for render farms, which can be massive in scale with thousands to tens of thousands of cores. It ensures that the high volume of requests is evenly distributed to all of the available TACTIC processes. The exact number of processes required to handle the high volume is highly dependent on the number of requests made and to the complexity of the requests. However, because load balancing will provide near-linear scalability, the number of processes can be increased to a level that is sufficient for the number of requests being demanded of the client API. Report generation: TACTIC\u2019s reporting system is powerful and comprehensive, and the load on host CPUs can increase significantly when complex reports are being run. Administrators should focus on report generation when investigating load utilization. Checkins: There are two kinds of complexity when considering scalability for checkins: Large Checkins: TACTIC offers a wide variety of checkin configurations that will accommodate large bandwidth, large files, and complex dependency between files. Many Checkins: There are few concerns with a large number of checkins. The number of checkins that occur even in the largest of productions is small compared to the limits of a database.","title":"Planning Notes"},{"location":"deploy-tactic-scalability-planning/#determining-tactic-hardware-requirements","text":"Hardware Overview TACTIC works well with most types of hardware, but industry-standard server level components are highly recommended. The exact configuration will depend on the specific needs of your facility. For most deployments, TACTIC can be installed on the typical commodity hardware used by most small and large enterprises. TACTIC is a purpose-built relational database at its core, and your hardware choices can reflect that fact. TACTIC service requirements: Assuming TACTIC is the only service on the host, the minimal requirements for a production-level deployment of a TACTIC host are: CPU: dual core Memory: 4G Disk space needed for TACTIC to run on: 10G (assets should be stored elsewhere, on an enterprise quality server) These requirements represent the recommended absolute minimal hardware required to run a basic TACTIC service in a production environment. For development and testing, TACTIC will run on most hardware including laptops. Asset storage: It is highly recommended that assets be stored on an enterprise-quality, high-availability server, and not on the TACTIC host. RAID Options: You can use various RAID configurations to maximize reliability and performance. For example, you could locate the Operating System on one physical drive, and the database files on another. Or you could locate the database on a RAID array. Asset meta data: The amount of asset meta data stored on disk by TACTIC is insignificant to today\u2019s hardware specifications and need not be a consideration when choosing a server: reliability and performance should be higher concerns.","title":"Determining TACTIC Hardware Requirements"},{"location":"deploy-tactic-scalability-planning/#determining-tactic-service-locations","text":"Segregating Services TACTIC offers a number of different services for different purposes. For example, the TACTIC server can serve out complex widgets, serve out large numbers of client API requests and perform large, complex check-ins. Each type of service has distinct needs, so it is often beneficial to segregate the services to be independent of each other. This allows each service to operate within a pool of assigned resources without affecting (or being affected by) the other services. For example, if a render farm used a client API script that heavily loaded the TACTIC server and its requests were shared with user interface requests, users would experience inconsistent (and occasionally unacceptably slow) response times. This experience would cause frustration amongst users, so it would be necessary to segregate their user interface service from the render farm\u2019s client API service. Each type of service has very different demands and needs, so segregating services also allows you to tune the hardware and software to the specifications required for the service they are handling. Ultimately, you can maximize the use of your available resources. How Load Balancing Works Load balancing distributes requests to various TACTIC processes using an algorithm that determines which request is delegated to which process. The default algorithm is a very simple randomizer. For most applications, the default algorithm works perfectly fine. It is left to chance whether a particular request will be assigned to a heavily loaded process or one that is sitting idle, so there may be inconsistent performance depending on load and availability of TACTIC processes not already loaded. IIS delegation algorithms (on MSWeb Server) are also supported. For Apache, an example algorithm is provided you can customize to your needs. Each process, by default, is assigned two simultaneous requests at most. This limit has proven in production to be the most effective because it prevents the Python process itself from being overloaded waiting for required I/O operations. If there are excess requests waiting to be processed, they are kept in a queue and assigned sequentially to processes as they become available. Python\u2019s GIL (global interpreter lock) prevents any Python process from using more than one CPU or core, so the number of threads available for any given process is limited. True scalability is achieved by load-balancing requests over multiple processes. This method scales seamlessly and linearly over multiple cores, multiple CPUs and ultimately over multiple physical servers with only simple configuration changes.","title":"Determining TACTIC Service Locations"},{"location":"deploy-tactic-scalability-planning/#post-deployment-tactic-upscaling","text":"Scenarios TACTIC is easily upscaled in most post deployment scenarios. Upscaling does not require any significant downtime of TACTIC services. Some scenario examples follow, with bullet points outlining why these possible solutions would be followed: Increasing number of TACTIC processes on a single machine** Splitting TACTIC into multiple servers from one server** Easy way to upscale/troubleshoot Heavy reporting Many users/API calls from automated processes Splitting the HTTP co-service into multiple servers from one server** Many Checkins Large Checkins","title":"Post Deployment TACTIC Upscaling"},{"location":"deploy-tactic-scalability-solution/","text":"TACTIC, a Scalable Solution A data management system to grow along with your expanding data needs TACTIC software meets the complex content demands of today\u2019s large-scale production environment: Based on existing web technologies, it is easy to maintain and scale Easy to load-balance and scale across cores and across multiple machines What Makes TACTIC Scalable? The TACTIC platform uses web technologies in its underlying architecture. As proven by many popular web sites today, web technologies are able to scale to a large number of users\u2014to levels far beyond the size of any large installation today requiring TACTIC. The TACTIC user interface and its API (Application Programmer Interface) are both built on web technologies. A web server controls as the user front end, and accesses a back-end database. Web servers can handle high volumes, so scalability is not an issue \u2014 especially for the relatively manageable volume seen in even the largest of digital productions. Web server technology TACTIC uses a web server to deliver static content to users, who are able to access TACTIC over the web. Web servers are capable of delivering enormous numbers of requests, and will remain stable during heavy loads. Web servers by definition are the most efficient vehicles for web delivery, and TACTIC technology is optimized to take advantage of this technology for fast execution and scalability. Leading database technology TACTIC supports a variety of databases, including PostgreSQL, MySQL, and SQLServer. Today\u2019s databases coupled with today\u2019s hardware are sufficiently powerful to handle any of today\u2019s production needs. The largest of digital productions cannot come close to exceeding the data limits of a typical database. Optimized requests With digital productions, the amount of data required is seldom the issue. Rather, bottlenecks are typically caused by complex requests slowing down database response time. Digital productions tend to use deeply nested and enormously complex relationships between various pieces of data. It is this complexity that tends to slow down applications that try to parse this data in a meaningful human way, creating complex requests that slow down database response. TACTIC is designed from the ground up to master the complexities of digital productions. For every request, it builds a unique object-relational mapper specifically designed for the needs of high volume, large scale digital production asset management solutions. TACTIC is flexible enough to handle the complex relationships between any part of the production pipeline, and has proven itself in large-scale projects using extremely complex data. Easy code maintenance The Python programming language is used for TACTIC application development. Python has many strengths that contribute to ease of maintenance (courtesy of www.python.org): clear, readable syntax strong introspection capabilities intuitive object orientation natural expression of procedural code full modularity supporting hierarchical packages exception-based error handling very high-level dynamic data types extensive standard libraries and third party modules for virtually every task extensions and modules easily written in C, C++ (or Java for Jython, or .NET languages for IronPython) embeddable within applications as a scripting interface Load balancing Load balancing the distribution of requests across TACTIC processes is possible across cores and across multiple machines, and enables TACTIC to scale to large enterprise environments. (For details and examples, see TACTIC Scalable Configuration Examples .) Segregating services The various TACTIC services can be segregated to run independently of each other. This allows important services, such as user interface requests, to access their own resources and not be slowed down by other more resource-intensive services such as render farms. (For details and examples, see Scalable TACTIC Deployments .) Types of Scalability There are several types of scalability that are considerations with the use of Python as the TACTIC programming language: Code scalability: TACTIC contains thousands of classes and many hundreds of thousands of lines of code which are facilitated by use of the Python language. There has been no reason to believe that the code base cannot continue to scale to meet software needs for the foreseeable future. Memory scalability: Python is known for large memory requirements when compared to other languages, but the required memory for TACTIC code is much smaller than that found on typical servers, and has seldom been an issue. Performance scalability: Python\u2019s GIL (Global Interpreter Lock) limits Python\u2019s scalability across multiple threads. This limitation has been long discussed in newsgroups, with the general consensus that scalability is achieved much more easily by load-balancing across processes rather than across threads. TACTIC enables easy load balancing across processes to achieve full linear scalability. Maintenance scalability: Clean and clear syntax makes it easy to refactor and maintain code over the long term. Experience has shown that our code base is very accessible to new developers, providing confidence that code base knowledge can be maintained over the years. Overall, very few limitations with the Python language itself have been encountered and have easily circumvented its lack of scalability across multiple threads by optimizing proper load balancing across processes. Additional Scalability Considerations Availability TACTIC has been designed to be highly stable even under extremely heavy stress. It has been tested and tuned on several projects in environments of high stress and high load and has been proven to run under duress without going down. As with any piece of software, there is always a point a failure\u2014there are a number of legitimate reasons for a TACTIC server becoming unresponsive or even going down: network cutoff power failure physical memory failure overloaded requests for the available resources For projects that require high availability even in the event of catastrophic failure, there are a number of hardware solutions to provide failover should the primary resource fail. These hardware solutions will instantly redirect requests to a redundant resource, thereby providing continuous service to the users. Memory requirements Each available process will use a certain amount of memory, so a balance must be struck between the number of processes and the size of the complete in-memory TACTIC footprint on the server. In other words, adding more processes may or may not increase the availability of TACTIC if memory is an issue. If processes start running into swap space, performance will be severely affected. As memory usage becomes an issue, the choice will be to load balance over multiple machines (see Scalable TACTIC Deployments ).","title":"TACTIC as a Scalable Solution"},{"location":"deploy-tactic-scalability-solution/#tactic-a-scalable-solution","text":"A data management system to grow along with your expanding data needs TACTIC software meets the complex content demands of today\u2019s large-scale production environment: Based on existing web technologies, it is easy to maintain and scale Easy to load-balance and scale across cores and across multiple machines","title":"TACTIC, a Scalable Solution"},{"location":"deploy-tactic-scalability-solution/#what-makes-tactic-scalable","text":"The TACTIC platform uses web technologies in its underlying architecture. As proven by many popular web sites today, web technologies are able to scale to a large number of users\u2014to levels far beyond the size of any large installation today requiring TACTIC. The TACTIC user interface and its API (Application Programmer Interface) are both built on web technologies. A web server controls as the user front end, and accesses a back-end database. Web servers can handle high volumes, so scalability is not an issue \u2014 especially for the relatively manageable volume seen in even the largest of digital productions. Web server technology TACTIC uses a web server to deliver static content to users, who are able to access TACTIC over the web. Web servers are capable of delivering enormous numbers of requests, and will remain stable during heavy loads. Web servers by definition are the most efficient vehicles for web delivery, and TACTIC technology is optimized to take advantage of this technology for fast execution and scalability. Leading database technology TACTIC supports a variety of databases, including PostgreSQL, MySQL, and SQLServer. Today\u2019s databases coupled with today\u2019s hardware are sufficiently powerful to handle any of today\u2019s production needs. The largest of digital productions cannot come close to exceeding the data limits of a typical database. Optimized requests With digital productions, the amount of data required is seldom the issue. Rather, bottlenecks are typically caused by complex requests slowing down database response time. Digital productions tend to use deeply nested and enormously complex relationships between various pieces of data. It is this complexity that tends to slow down applications that try to parse this data in a meaningful human way, creating complex requests that slow down database response. TACTIC is designed from the ground up to master the complexities of digital productions. For every request, it builds a unique object-relational mapper specifically designed for the needs of high volume, large scale digital production asset management solutions. TACTIC is flexible enough to handle the complex relationships between any part of the production pipeline, and has proven itself in large-scale projects using extremely complex data. Easy code maintenance The Python programming language is used for TACTIC application development. Python has many strengths that contribute to ease of maintenance (courtesy of www.python.org): clear, readable syntax strong introspection capabilities intuitive object orientation natural expression of procedural code full modularity supporting hierarchical packages exception-based error handling very high-level dynamic data types extensive standard libraries and third party modules for virtually every task extensions and modules easily written in C, C++ (or Java for Jython, or .NET languages for IronPython) embeddable within applications as a scripting interface Load balancing Load balancing the distribution of requests across TACTIC processes is possible across cores and across multiple machines, and enables TACTIC to scale to large enterprise environments. (For details and examples, see TACTIC Scalable Configuration Examples .) Segregating services The various TACTIC services can be segregated to run independently of each other. This allows important services, such as user interface requests, to access their own resources and not be slowed down by other more resource-intensive services such as render farms. (For details and examples, see Scalable TACTIC Deployments .) Types of Scalability There are several types of scalability that are considerations with the use of Python as the TACTIC programming language: Code scalability: TACTIC contains thousands of classes and many hundreds of thousands of lines of code which are facilitated by use of the Python language. There has been no reason to believe that the code base cannot continue to scale to meet software needs for the foreseeable future. Memory scalability: Python is known for large memory requirements when compared to other languages, but the required memory for TACTIC code is much smaller than that found on typical servers, and has seldom been an issue. Performance scalability: Python\u2019s GIL (Global Interpreter Lock) limits Python\u2019s scalability across multiple threads. This limitation has been long discussed in newsgroups, with the general consensus that scalability is achieved much more easily by load-balancing across processes rather than across threads. TACTIC enables easy load balancing across processes to achieve full linear scalability. Maintenance scalability: Clean and clear syntax makes it easy to refactor and maintain code over the long term. Experience has shown that our code base is very accessible to new developers, providing confidence that code base knowledge can be maintained over the years. Overall, very few limitations with the Python language itself have been encountered and have easily circumvented its lack of scalability across multiple threads by optimizing proper load balancing across processes.","title":"What Makes TACTIC Scalable?"},{"location":"deploy-tactic-scalability-solution/#additional-scalability-considerations","text":"Availability TACTIC has been designed to be highly stable even under extremely heavy stress. It has been tested and tuned on several projects in environments of high stress and high load and has been proven to run under duress without going down. As with any piece of software, there is always a point a failure\u2014there are a number of legitimate reasons for a TACTIC server becoming unresponsive or even going down: network cutoff power failure physical memory failure overloaded requests for the available resources For projects that require high availability even in the event of catastrophic failure, there are a number of hardware solutions to provide failover should the primary resource fail. These hardware solutions will instantly redirect requests to a redundant resource, thereby providing continuous service to the users. Memory requirements Each available process will use a certain amount of memory, so a balance must be struck between the number of processes and the size of the complete in-memory TACTIC footprint on the server. In other words, adding more processes may or may not increase the availability of TACTIC if memory is an issue. If processes start running into swap space, performance will be severely affected. As memory usage becomes an issue, the choice will be to load balance over multiple machines (see Scalable TACTIC Deployments ).","title":"Additional Scalability Considerations"},{"location":"install-tactic-general/","text":"General TACTIC Install This document guides you through the general installation of TACTIC on any server environment with some brief background information. For installation on Windows or RHEL environment, please refer to the corresponding sections in this book. To completely install TACTIC, there are five main components that have to be set up in the following order: Database Python Image Utilities TACTIC Installer A Web Server Install Database TACTIC stores all metadata in a database, and supports a variety of database types, including: PostgreSQL MySQL SQLServer SQLite The recommended database is PostgreSQL - an industrial strength, hugely scalable database that has proven itself in thousands of industries around the world. This document uses PostgreSQL, although other database types will be available in the Install TACTIC Application section. If you do not see your desired database type listed there, inquire on the community forum. We currently recommend PostgreSQL 9.6 and upwards for ease of installation. Go to the PostgreSQL website for more information. Install PostgreSQL Edit the file, /var/lib/pgsql/data/pg_hba.conf This file determines all of the user permissions for PostgreSQL. To begin with, turn on all of the permissions contained in this file. This is a temporary measure that will greatly simplify the installation process. You may lock down these permissions at a later date. Please consult the PostgreSQL documentation on how to do this. TACTIC ships with a sample \"pg_hba.conf\" file, located in, $TACTIC_unzipped_package/src/install/postgresql/pg_hba.conf This file has an open security setting for ease of installation. It\u2019s best to back up your current pg_hba.conf file before copying over with the file provided by TACTIC. Restart the PostgreSQL Service Verification Verify that psql works in the command prompt: psql -U postgres template1 It should give you a prompt: template1=# If you see this prompt without the need to enter a password, you have successfully installed the PostgreSQL database. Type \\q to exit. Install Python and supporting modules Python is a core element of the TACTIC application, along with supporting Python modules First, you must install Python 2 or 3. Installers are available from the Python website . Python 2 has reached EOL as of January 2020, and it is recommended to start new installations with Python 3. Python 2.7 and 3.7+ are recommended versions for TACTIC. Second, you must install supporting modules. These modules depend on your version of Python, and your server environment. You must install the version of each module that matches your Python version. Python 2 Linux modules pillow lxml pycryptodomex requests Python 3 Linux modules pillow lxml pycryptodomex requests pytz Python 2 Windows modules pillow lxml pycryptodomex requests pywin32 Python 3 Windows modules pillow lxml pycryptodomex requests jaraco.windows pytz pywin32 You will also need a Python DB connectivity module. For PostgreSQL, use psycopg2 and for MySQL use mysqlclient. On UNIX/Linux systems, the system package manager typically has options for installing all the required Python packages onto the UNIX host machine. Install Image Utilities Imagemagick and ffmpeg are by TACTIC for various asset functions such as icon generation and metadata extraction. Installers are available for both Linux and Windows systems. Install Webserver TACTIC should be run behind an Apache web server. You can download Apache software at http://www.apache.org/ The TACTIC application server is able to serve up static content such as images, PDF files, Quicktime files, and so on, but it is not the most efficient at this because it is written in Python. This is what Apache is designed for. By running TACTIC behind Apache, it relieves TACTIC from serving the static content so that it can focus on the dynamic content. For production use, it is highly recommended that TACTIC is run behind the Apache server. This has many scalability advantages. When running behind Apache, Apache uses a reverse proxy and proxy balancer module to forward requests to communicate with TACTIC. Linux After the installation, some changes may need to be made in the \"httpd.conf\" file for Apache. Fedora Core: /etc/httpd/conf/httpd.conf Make sure the following lines are uncommented: LoadModule rewrite_module modules/mod_rewrite.so LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_http_module modules/mod_proxy_http.so LoadModule proxy_balancer_module modules/mod_proxy_balancer.so LoadModule deflate_module modules/mod_deflate.so Additional lines For Apache 2.4: LoadModule slotmem_shm_module modules/mod_slotmem_shm.so LoadModule filter_module modules/mod_filter.so LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so These lines may already be uncommented, depending on your distribution and version of Apache. You need Apache version 2.0.31 or later. The TACTIC installer generates an Apache extension conf file on completion. Copy that file to a directory that is recognized by Apache. For Fedora Core: copy the TACTIC generate Apache conf extension file to the following directory: /etc/httpd/conf.d/ If there is no such configuration extension folder, you must add the following line to the \"httpd.conf\" file so that it will read the extension configuration file provided by the installer: Include conf/tactic_win32.conf Web Server configuration In our provided file: tactic.conf Make sure the following lines exist: # Using the ProxyPass directives ProxyPreserveHost on Proxy balancer://tactic BalancerMember http://localhost:8081/tactic BalancerMember http://localhost:8082/tactic BalancerMember http://localhost:8083/tactic /Proxy ProxyPass /tactic balancer://tactic ProxyPass /tactic_data balancer://tactic For Apache 2.4: Comment out: #Order Allow,Deny #Allow from All Uncomment: Require all granted Note Warning: For load balancing, only use either: the Proxy Balancer method (recommended) or the RewriteRule method (not recommended). Do not use both methods at the same time. Note For configuring load-balancing set-up in a real production, please refer to the Load Balancing section in the Sys-admin docs. Note When trying to set up Apache on a Windows Server, to specify a share folder for Apache to use, you may need to include the name of the share folder in the path. For example, use the following if you have named the share folder \"my_share\": Alias /assets \"//10.0.0.17/my_share/assets\" Finally, after verifying the configuration is correct, restart the Apache service: service httpd restart Install TACTIC Unzip the file in a temporary location. # cd /tmp # unzip tactic_#.#.#.#.zip Go to /tmp/tactic_#. . /src/install/ cd /tmp/tactic_#.#.#.#/src/install Execute: install.py Note You must invoke the installation with root user privileges because it attempts to write to the python_install /site-packages directory. su python install.py The installer will ask a number of questions. First it ask for the TACTIC_BASE_DIR : Please enter the base path of the TACTIC installation: (/home/apache) - Enter the user the Apache Web Server is run under. Please enter the user Apache Web Server is run under: (apache) - It would copy the source code to the base path and create a symbolic link to it. An Apache Web Server file will be generated at the end which you would need to copy to the Apache config area upon installation of the web server. If there are existing files in the destination directory the installer will ask for your confirmation to remove it. At the end, you will see this: *** Installation of TACTIC completed at [/home/apache] *** Next, please install the Apache Web Server and then copy the Apache config extension [/home/apache/tactic_data/config/tactic.conf] to the Apache web server config area. e.g. /etc/httpd/conf.d/ Verification When the installation is completed, an asset directory will be created at ' TACTIC_DATA_DIR /assets'. The file tactic_paths.py will be created in the following directories: Linux /usr/lib/python#.#/site-packages/tacticenv Default contents: TACTIC_INSTALL_DIR='/home/apache/tactic' TACTIC_SITE_DIR='' TACTIC_DATA_DIR='/home/apache/tactic_data' Network Machine Access If you are on the server, you can access it by using the URL http://localhost/tactic . For other people to access it on the network, you need to find out its IP address. In a linux server, you can use the command \"ifconfig\" to locate it. It\u2019s the one listed as the inet addr. Verify the Installation Go to the \" TACTIC_INSTALL_DIR /src/bin\" folder Then su as the user tactic and run startup_dev.py: cd /home/apache/tactic/src/bin su tactic python startup_dev.py This \"startup_dev.py\" script is the development script which will dump output to the screen. The other startup script \"startup.py\" is the production start-up script and will dump output to a log file. The development start-up script is also much slower as it monitors the file system to see if any files have changed. The output would look like the following: Registering site ... admin Registering site ... default Registering site ... test Registering site ... my_project Starting TACTIC ... 05/Jul/2007:11:16:29 CONFIG INFO Server parameters: 05/Jul/2007:11:16:29 CONFIG INFO server.environment: development 05/Jul/2007:11:16:29 CONFIG INFO server.log_to_screen: True 05/Jul/2007:11:16:29 CONFIG INFO server.log_file: D:/tactic_temp/log/tactic_log 05/Jul/2007:11:16:29 CONFIG INFO server.log_tracebacks: True 05/Jul/2007:11:16:29 CONFIG INFO server.log_request_headers: True 05/Jul/2007:11:16:29 CONFIG INFO server.protocol_version: HTTP/1.0 05/Jul/2007:11:16:29 CONFIG INFO server.socket_host: 05/Jul/2007:11:16:29 CONFIG INFO server.socket_port: 8081 05/Jul/2007:11:16:29 CONFIG INFO server.socket_file: 05/Jul/2007:11:16:29 CONFIG INFO server.reverse_dns: False 05/Jul/2007:11:16:29 CONFIG INFO server.socket_queue_size: 10 05/Jul/2007:11:16:29 CONFIG INFO server.thread_pool: 5 05/Jul/2007:11:16:30 HTTP INFO Serving HTTP on http://localhost:8081/ http:// TACTIC_server_address /tactic/admin/ You should see the TACTIC login appear. There is a default user created on installation. This is the \"admin\" user and this user has the ability to see and change all aspects of the system. Log in as the admin user: Note You may be asked to change your password automatically at startup without entering these default credentials. user: admin password: tactic Note If you have not set up the TACTIC service, refer to the page \"Configure the TACTIC Service\". First, stop TACTIC running in dev mode if applicable by pressing Ctrl ^ C in that shell In Linux: service tactic start At this point you will need to install a TACTIC license file and then begin to set up a project. For more information on installing the license file, please refer to the Install License File chapter. For more information on getting started with projects, please refer to Setup documentation.","title":"General TACTIC Installation"},{"location":"install-tactic-general/#general-tactic-install","text":"This document guides you through the general installation of TACTIC on any server environment with some brief background information. For installation on Windows or RHEL environment, please refer to the corresponding sections in this book. To completely install TACTIC, there are five main components that have to be set up in the following order: Database Python Image Utilities TACTIC Installer A Web Server","title":"General TACTIC Install"},{"location":"install-tactic-general/#install-database","text":"TACTIC stores all metadata in a database, and supports a variety of database types, including: PostgreSQL MySQL SQLServer SQLite The recommended database is PostgreSQL - an industrial strength, hugely scalable database that has proven itself in thousands of industries around the world. This document uses PostgreSQL, although other database types will be available in the Install TACTIC Application section. If you do not see your desired database type listed there, inquire on the community forum. We currently recommend PostgreSQL 9.6 and upwards for ease of installation. Go to the PostgreSQL website for more information. Install PostgreSQL Edit the file, /var/lib/pgsql/data/pg_hba.conf This file determines all of the user permissions for PostgreSQL. To begin with, turn on all of the permissions contained in this file. This is a temporary measure that will greatly simplify the installation process. You may lock down these permissions at a later date. Please consult the PostgreSQL documentation on how to do this. TACTIC ships with a sample \"pg_hba.conf\" file, located in, $TACTIC_unzipped_package/src/install/postgresql/pg_hba.conf This file has an open security setting for ease of installation. It\u2019s best to back up your current pg_hba.conf file before copying over with the file provided by TACTIC. Restart the PostgreSQL Service Verification Verify that psql works in the command prompt: psql -U postgres template1 It should give you a prompt: template1=# If you see this prompt without the need to enter a password, you have successfully installed the PostgreSQL database. Type \\q to exit.","title":"Install Database"},{"location":"install-tactic-general/#install-python-and-supporting-modules","text":"Python is a core element of the TACTIC application, along with supporting Python modules First, you must install Python 2 or 3. Installers are available from the Python website . Python 2 has reached EOL as of January 2020, and it is recommended to start new installations with Python 3. Python 2.7 and 3.7+ are recommended versions for TACTIC. Second, you must install supporting modules. These modules depend on your version of Python, and your server environment. You must install the version of each module that matches your Python version. Python 2 Linux modules pillow lxml pycryptodomex requests Python 3 Linux modules pillow lxml pycryptodomex requests pytz Python 2 Windows modules pillow lxml pycryptodomex requests pywin32 Python 3 Windows modules pillow lxml pycryptodomex requests jaraco.windows pytz pywin32 You will also need a Python DB connectivity module. For PostgreSQL, use psycopg2 and for MySQL use mysqlclient. On UNIX/Linux systems, the system package manager typically has options for installing all the required Python packages onto the UNIX host machine.","title":"Install Python and supporting modules"},{"location":"install-tactic-general/#install-image-utilities","text":"Imagemagick and ffmpeg are by TACTIC for various asset functions such as icon generation and metadata extraction. Installers are available for both Linux and Windows systems.","title":"Install Image Utilities"},{"location":"install-tactic-general/#install-webserver","text":"TACTIC should be run behind an Apache web server. You can download Apache software at http://www.apache.org/ The TACTIC application server is able to serve up static content such as images, PDF files, Quicktime files, and so on, but it is not the most efficient at this because it is written in Python. This is what Apache is designed for. By running TACTIC behind Apache, it relieves TACTIC from serving the static content so that it can focus on the dynamic content. For production use, it is highly recommended that TACTIC is run behind the Apache server. This has many scalability advantages. When running behind Apache, Apache uses a reverse proxy and proxy balancer module to forward requests to communicate with TACTIC. Linux After the installation, some changes may need to be made in the \"httpd.conf\" file for Apache. Fedora Core: /etc/httpd/conf/httpd.conf Make sure the following lines are uncommented: LoadModule rewrite_module modules/mod_rewrite.so LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_http_module modules/mod_proxy_http.so LoadModule proxy_balancer_module modules/mod_proxy_balancer.so LoadModule deflate_module modules/mod_deflate.so Additional lines For Apache 2.4: LoadModule slotmem_shm_module modules/mod_slotmem_shm.so LoadModule filter_module modules/mod_filter.so LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so These lines may already be uncommented, depending on your distribution and version of Apache. You need Apache version 2.0.31 or later. The TACTIC installer generates an Apache extension conf file on completion. Copy that file to a directory that is recognized by Apache. For Fedora Core: copy the TACTIC generate Apache conf extension file to the following directory: /etc/httpd/conf.d/ If there is no such configuration extension folder, you must add the following line to the \"httpd.conf\" file so that it will read the extension configuration file provided by the installer: Include conf/tactic_win32.conf Web Server configuration In our provided file: tactic.conf Make sure the following lines exist: # Using the ProxyPass directives ProxyPreserveHost on Proxy balancer://tactic BalancerMember http://localhost:8081/tactic BalancerMember http://localhost:8082/tactic BalancerMember http://localhost:8083/tactic /Proxy ProxyPass /tactic balancer://tactic ProxyPass /tactic_data balancer://tactic For Apache 2.4: Comment out: #Order Allow,Deny #Allow from All Uncomment: Require all granted Note Warning: For load balancing, only use either: the Proxy Balancer method (recommended) or the RewriteRule method (not recommended). Do not use both methods at the same time. Note For configuring load-balancing set-up in a real production, please refer to the Load Balancing section in the Sys-admin docs. Note When trying to set up Apache on a Windows Server, to specify a share folder for Apache to use, you may need to include the name of the share folder in the path. For example, use the following if you have named the share folder \"my_share\": Alias /assets \"//10.0.0.17/my_share/assets\" Finally, after verifying the configuration is correct, restart the Apache service: service httpd restart","title":"Install Webserver"},{"location":"install-tactic-general/#install-tactic","text":"Unzip the file in a temporary location. # cd /tmp # unzip tactic_#.#.#.#.zip Go to /tmp/tactic_#. . /src/install/ cd /tmp/tactic_#.#.#.#/src/install Execute: install.py Note You must invoke the installation with root user privileges because it attempts to write to the python_install /site-packages directory. su python install.py The installer will ask a number of questions. First it ask for the TACTIC_BASE_DIR : Please enter the base path of the TACTIC installation: (/home/apache) - Enter the user the Apache Web Server is run under. Please enter the user Apache Web Server is run under: (apache) - It would copy the source code to the base path and create a symbolic link to it. An Apache Web Server file will be generated at the end which you would need to copy to the Apache config area upon installation of the web server. If there are existing files in the destination directory the installer will ask for your confirmation to remove it. At the end, you will see this: *** Installation of TACTIC completed at [/home/apache] *** Next, please install the Apache Web Server and then copy the Apache config extension [/home/apache/tactic_data/config/tactic.conf] to the Apache web server config area. e.g. /etc/httpd/conf.d/ Verification When the installation is completed, an asset directory will be created at ' TACTIC_DATA_DIR /assets'. The file tactic_paths.py will be created in the following directories: Linux /usr/lib/python#.#/site-packages/tacticenv Default contents: TACTIC_INSTALL_DIR='/home/apache/tactic' TACTIC_SITE_DIR='' TACTIC_DATA_DIR='/home/apache/tactic_data'","title":"Install TACTIC"},{"location":"install-tactic-general/#network-machine-access","text":"If you are on the server, you can access it by using the URL http://localhost/tactic . For other people to access it on the network, you need to find out its IP address. In a linux server, you can use the command \"ifconfig\" to locate it. It\u2019s the one listed as the inet addr.","title":"Network Machine Access"},{"location":"install-tactic-general/#verify-the-installation","text":"Go to the \" TACTIC_INSTALL_DIR /src/bin\" folder Then su as the user tactic and run startup_dev.py: cd /home/apache/tactic/src/bin su tactic python startup_dev.py This \"startup_dev.py\" script is the development script which will dump output to the screen. The other startup script \"startup.py\" is the production start-up script and will dump output to a log file. The development start-up script is also much slower as it monitors the file system to see if any files have changed. The output would look like the following: Registering site ... admin Registering site ... default Registering site ... test Registering site ... my_project Starting TACTIC ... 05/Jul/2007:11:16:29 CONFIG INFO Server parameters: 05/Jul/2007:11:16:29 CONFIG INFO server.environment: development 05/Jul/2007:11:16:29 CONFIG INFO server.log_to_screen: True 05/Jul/2007:11:16:29 CONFIG INFO server.log_file: D:/tactic_temp/log/tactic_log 05/Jul/2007:11:16:29 CONFIG INFO server.log_tracebacks: True 05/Jul/2007:11:16:29 CONFIG INFO server.log_request_headers: True 05/Jul/2007:11:16:29 CONFIG INFO server.protocol_version: HTTP/1.0 05/Jul/2007:11:16:29 CONFIG INFO server.socket_host: 05/Jul/2007:11:16:29 CONFIG INFO server.socket_port: 8081 05/Jul/2007:11:16:29 CONFIG INFO server.socket_file: 05/Jul/2007:11:16:29 CONFIG INFO server.reverse_dns: False 05/Jul/2007:11:16:29 CONFIG INFO server.socket_queue_size: 10 05/Jul/2007:11:16:29 CONFIG INFO server.thread_pool: 5 05/Jul/2007:11:16:30 HTTP INFO Serving HTTP on http://localhost:8081/ http:// TACTIC_server_address /tactic/admin/ You should see the TACTIC login appear. There is a default user created on installation. This is the \"admin\" user and this user has the ability to see and change all aspects of the system. Log in as the admin user: Note You may be asked to change your password automatically at startup without entering these default credentials. user: admin password: tactic Note If you have not set up the TACTIC service, refer to the page \"Configure the TACTIC Service\". First, stop TACTIC running in dev mode if applicable by pressing Ctrl ^ C in that shell In Linux: service tactic start At this point you will need to install a TACTIC license file and then begin to set up a project. For more information on installing the license file, please refer to the Install License File chapter. For more information on getting started with projects, please refer to Setup documentation.","title":"Verify the Installation"},{"location":"install-tactic-license/","text":"Install a TACTIC License Install License When TACTIC is accessed through the web browser, if a license file cannot be found, TACTIC will prompted for a license file. To install a license file, browse for the license file (.xml) provided by Southpaw Technology. Once the file has been selected for upload, click Install License to upload and install the license file. If the license file is valid, TACTIC will display the message \"License renewal completed\" Once this has been completed, TACTIC will no longer prompt for a valid license file. Renew License To view information on the total users for the license and how many are active and to update the existing license file, in the sidebar, load Global \u2192 License From here you view the License statistics and update a new license file. Manual License Install When the user interface tool is used to upload the license, TACTIC renames the file to tactic-license.xml and places it on the server under TACTIC_DATA_DIR /config/tactic-license.xml The XML file provided from the TACTIC representative can be renamed. After the rename, place the license on the server according to the structure outlined above and re-browse to tell TACTIC the new license name.","title":"Install TACTIC License"},{"location":"install-tactic-license/#install-a-tactic-license","text":"","title":"Install a TACTIC License"},{"location":"install-tactic-license/#install-license","text":"When TACTIC is accessed through the web browser, if a license file cannot be found, TACTIC will prompted for a license file. To install a license file, browse for the license file (.xml) provided by Southpaw Technology. Once the file has been selected for upload, click Install License to upload and install the license file. If the license file is valid, TACTIC will display the message \"License renewal completed\" Once this has been completed, TACTIC will no longer prompt for a valid license file.","title":"Install License"},{"location":"install-tactic-license/#renew-license","text":"To view information on the total users for the license and how many are active and to update the existing license file, in the sidebar, load Global \u2192 License From here you view the License statistics and update a new license file.","title":"Renew License"},{"location":"install-tactic-license/#manual-license-install","text":"When the user interface tool is used to upload the license, TACTIC renames the file to tactic-license.xml and places it on the server under TACTIC_DATA_DIR /config/tactic-license.xml The XML file provided from the TACTIC representative can be renamed. After the rename, place the license on the server according to the structure outlined above and re-browse to tell TACTIC the new license name.","title":"Manual License Install"},{"location":"install-tactic-mysql/","text":"TODO: MySQL steps for Linux and Windows Install MySQL Connector yum install gcc-plugin-devel python3-devel mysql-devel python3 -m pip install mysqlclient Install MySQL Install microsoft c++ resitributable Install MySQL 8 Install MySQL 8: Choose Only Server option, Legacy authentication error when trying to use service account... chose windows default. Add ProgramFiles\\MySQL\\bin. to System PATH variable VC for Python MySQL connoctor C ...after install copy this folder from Program Files to Program Files 86x python -m pip install MySQL-python Install TACTIC install.py -i false -t MySQL","title":"Install tactic mysql"},{"location":"install-tactic-mysql/#todo-mysql-steps-for-linux-and-windows","text":"Install MySQL Connector yum install gcc-plugin-devel python3-devel mysql-devel python3 -m pip install mysqlclient","title":"TODO: MySQL steps for Linux and Windows"},{"location":"install-tactic-mysql/#install-mysql","text":"Install microsoft c++ resitributable Install MySQL 8 Install MySQL 8: Choose Only Server option, Legacy authentication error when trying to use service account... chose windows default. Add ProgramFiles\\MySQL\\bin. to System PATH variable VC for Python MySQL connoctor C ...after install copy this folder from Program Files to Program Files 86x python -m pip install MySQL-python","title":"Install MySQL"},{"location":"install-tactic-mysql/#install-tactic","text":"install.py -i false -t MySQL","title":"Install TACTIC"},{"location":"install-tactic-rhel/","text":"Install TACTIC on RHEL Updated October 2019 These instructions are for a TACTIC server that will use PostgreSQL and Apache on a RHEL server (FedoraOS, CentOS, Red Hat). Refer to the General TACTIC Installation for using other OS. For other database types, refer to guides in Install TACTIC Application. Install PostgreSQL dnf install postgresql-server /usr/bin/postgresql-setup --initdb systemctl enable postgresql systemctl start postgresql dnf install postgresql-contrib postgresql-devel Install Python 3 and supporting modules Check if Python 3 is already installed on your system by running the following shell command and reviewing the Python 3 console, [root@localhost ~]# python3 Python 3.7.3 (default, Mar 27 2019, 13:36:35) [GCC 9.0.1 20190227 (Red Hat 9.0.1-0.8)] on linux Type help , copyright , credits or license for more information. Python 3.7 reccomended for TACTIC 4.7. If Python is not installed, install Python using dnf, dnf install python3 Install Python 3 supporting modules, dnf install python3-pillow dnf install python3-pycryptodomex dnf install python3-lxml dnf install python3-requests dnf install python3-pytz For Python 2, dnf install python-pillow dnf install python-pycryptodomex dnf install python2-lxml dnf install python-requests Install Python DB connectivity module, PostgreSQL: dnf install python3-psycopg2 Install Image Utilities ImageMagick and FFMPEG dnf install php-pear php-devel gcc dnf install ImageMagick ImageMagick-devel ImageMagick-perl dnf -y install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm dnf -y install ffmpeg Install Apache dnf install httpd firewall-cmd --add-service=http --permanent firewall-cmd --reload /usr/sbin/setsebool -P httpd_can_network_connect 1 Install TACTIC RPM Download the TACTIC RPM from community site downloads page. rpm -Uhv TACTIC-RPM-file Configure PostgreSQL Note: TACTIC requires database access, and for ease of installation, we reccomend using the PostgreSQL configuration file provided in the source code. After installation, you can further configure and secure your database. Replace the file, /var/lib/pgsql/data/pg_hba.conf with, /opt/tactic/tactic/src/install/postgresql/pg_hba.conf Restart postgresql, systemctl restart postgresql Run TACTIC Bootstrap python3 /opt/tactic/tactic/src/pyasm/search/upgrade/postgresql/bootstrap_load.py","title":"Install TACTIC on RHEL"},{"location":"install-tactic-rhel/#install-tactic-on-rhel","text":"Updated October 2019 These instructions are for a TACTIC server that will use PostgreSQL and Apache on a RHEL server (FedoraOS, CentOS, Red Hat). Refer to the General TACTIC Installation for using other OS. For other database types, refer to guides in Install TACTIC Application.","title":"Install TACTIC on RHEL"},{"location":"install-tactic-rhel/#install-postgresql","text":"dnf install postgresql-server /usr/bin/postgresql-setup --initdb systemctl enable postgresql systemctl start postgresql dnf install postgresql-contrib postgresql-devel","title":"Install PostgreSQL"},{"location":"install-tactic-rhel/#install-python-3-and-supporting-modules","text":"Check if Python 3 is already installed on your system by running the following shell command and reviewing the Python 3 console, [root@localhost ~]# python3 Python 3.7.3 (default, Mar 27 2019, 13:36:35) [GCC 9.0.1 20190227 (Red Hat 9.0.1-0.8)] on linux Type help , copyright , credits or license for more information. Python 3.7 reccomended for TACTIC 4.7. If Python is not installed, install Python using dnf, dnf install python3 Install Python 3 supporting modules, dnf install python3-pillow dnf install python3-pycryptodomex dnf install python3-lxml dnf install python3-requests dnf install python3-pytz For Python 2, dnf install python-pillow dnf install python-pycryptodomex dnf install python2-lxml dnf install python-requests Install Python DB connectivity module, PostgreSQL: dnf install python3-psycopg2","title":"Install Python 3 and supporting modules"},{"location":"install-tactic-rhel/#install-image-utilities-imagemagick-and-ffmpeg","text":"dnf install php-pear php-devel gcc dnf install ImageMagick ImageMagick-devel ImageMagick-perl dnf -y install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm dnf -y install ffmpeg","title":"Install Image Utilities ImageMagick and FFMPEG"},{"location":"install-tactic-rhel/#install-apache","text":"dnf install httpd firewall-cmd --add-service=http --permanent firewall-cmd --reload /usr/sbin/setsebool -P httpd_can_network_connect 1","title":"Install Apache"},{"location":"install-tactic-rhel/#install-tactic-rpm","text":"Download the TACTIC RPM from community site downloads page. rpm -Uhv TACTIC-RPM-file","title":"Install TACTIC RPM"},{"location":"install-tactic-rhel/#configure-postgresql","text":"Note: TACTIC requires database access, and for ease of installation, we reccomend using the PostgreSQL configuration file provided in the source code. After installation, you can further configure and secure your database. Replace the file, /var/lib/pgsql/data/pg_hba.conf with, /opt/tactic/tactic/src/install/postgresql/pg_hba.conf Restart postgresql, systemctl restart postgresql","title":"Configure PostgreSQL"},{"location":"install-tactic-rhel/#run-tactic-bootstrap","text":"python3 /opt/tactic/tactic/src/pyasm/search/upgrade/postgresql/bootstrap_load.py","title":"Run TACTIC Bootstrap"},{"location":"install-tactic-windows-server/","text":"Install TACTIC on Windows Server Last Updated October 2019 This is an installation guide for installing TACTIC on Windows Server 2019 using PostgreSQL. For other database types, see guides in Install TACTIC Application. TACTIC has been tested on Windows Server 2008 and later. Tip: Install Google Chrome as Windows Server 2019 will come with Internet Explorer as the default browser. Before you start the installation, download the TACTIC source code, available from GitHub or the community downloads page . Install PostgreSQL Download the latest version from the PostgreSQL site . The visual installer is recommended as it is easy to use. The visual installer will have you set the following settings: Password for postgres superuser PostgreSQL data folder PostgreSQL port Note: It is recomended to install PostgreSQL on the default port 5432. Note: You will need the password when connecting with TACTIC later in the installation. After installing PostgreSQL, add the psql executable to the system PATH variable. You will need to add the path, PostgreSQL install dir \\bin For example, C:\\Program Files\\PostgreSQL\\12\\bin See \"System PATH variable\" for instructions to edit the PATH variable. Test that PostgreSQL was added to the system PATH variable running the command, psql Finally, for the TACTIC installation, backup the file, PostgreSQL install dir \\data\\pg_hba.conf and replace with, TACTIC source code \\src\\install\\postgresql\\pg_hba.conf Restart PostgreSQL from the Services manager. Install Python 3 and supporting modules Download the installer from the Python website . Python 3.7+ is reccomended for TACTIC 4.7. Run the installer. Add the Python executable to the system PATH variable: Python install dir This could vary based on your installation. For example, C:\\Users\\Adminstrator\\AppData\\Local\\Programs\\Python\\Python37 Test that Python was added to the system PATH variable by running the command: python You should get the following output, C:\\Users\\Administrator python Python 3.7.5 (tags/v3.7.5:5c02a39a0b, Oct 15 2019, 00:11:34) [MSC v.1916 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. Install supporting support with pip. In the command prompt, run the following command, python -m pip install pillow lxml pycryptodomex requests jaraco.windows pytz pywin32 If you are installing with PostgreSQL, install the Python PostgreSQL connectivity module, python -m pip install psycopg2 Install Image Utilities ImageMagick and FFMPEG Download ImageMagick and run the installation wizard. Be sure to select the following options during installation: Install FFMPEG Install legacy utilities Add to System PATH variable Install HTTP Apache Visit the Apache website and download installation files for Windows . Unzip the installation achive and place the Apache folder in C, C:\\Apache24 Install the Apache service by running the command, C:\\Apache24\\bin\\httpd.exe -k install Start the Apache service from the Services manager and test Apache by visiting \"127.0.0.1\" in browser. Install TACTIC Execute install.py from the TACTIC source code: python TACTIC source code dir \\src\\install\\install.py Note: The installation requires write permission to C:\\ProgramFiles and C:\\ProgramData and you may need to run this with adminstrator priviledges. During the installation, you will set the TACTIC Install Directory. Test the installation by opening a command prompt and running, python TACTIC Install Directory \\src\\bin\\startup_dev.py Configure PostgreSQL For ease of installation, the provided TACTIC pg_hba.conf file configures PostgreSQL to not use a password. To reconfigure PostgreSQL to use the password set during PostgreSQL installation, replace the TACTIC pg_hba.conf file with the original. Restart PostgreSLQ after replacing with the original file. Configure HTTP Apache Enable Apache Modules In the file, C:\\Apache24\\conf\\httpd.conf Make sure the following lines are uncommented, LoadModule rewrite_module modules/mod_rewrite.so LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_http_module modules/mod_proxy_http.so LoadModule proxy_balancer_module modules/mod_proxy_balancer.so LoadModule deflate_module modules/mod_deflate.so LoadModule slotmem_shm_module modules/mod_slotmem_shm.so LoadModule filter_module modules/mod_filter.so LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so These lines may already be uncommented, depending on your distribution and version of Apache. You need version 2.0.31 or later. Enable TACTIC Apache Configuration An Apache configuration file for TACTIC is generated during installation. This file must be copied into the Apache configuration folder. Copy, C:\\ProgramData\\Southpaw\\Tactic\\config\\tactic_win32.conf Into, C:\\Apache24\\conf\\ Include the TACTIC configuration file in the Apache configuration file. Edit C:\\Apache24\\conf\\httpd.conf Add the following line to the end of this file, Include conf/tactic_win32.conf Restart the Apache service Fix for Python Windows Service The TACTIC Windows service is installed during installation with install.py Unfortunately, at the time this documentation has been last updated, you will need to adjust the Python pywin32 module. Copy contents from, Python install directory \\Python37\\Lib\\site-packages\\pywin32_system32 into, Python install directory \\Python37\\Lib\\site-packages\\win32 You should now be able to start the TACTIC service from the Services manager. If the service fails to start, you can try to debug by running the command, python TACTIC Install Directory \\src\\install\\service\\win32_service.py debug System PATH Variable To update the system PATH variable on Windows, navigate to, Start Control Panel System and Security System Advanced system settings Click Environment Variables, under System variables select the \"path\" variable, and \"Edit\".","title":"Install TACTIC Windows Server"},{"location":"install-tactic-windows-server/#install-tactic-on-windows-server","text":"Last Updated October 2019 This is an installation guide for installing TACTIC on Windows Server 2019 using PostgreSQL. For other database types, see guides in Install TACTIC Application. TACTIC has been tested on Windows Server 2008 and later. Tip: Install Google Chrome as Windows Server 2019 will come with Internet Explorer as the default browser. Before you start the installation, download the TACTIC source code, available from GitHub or the community downloads page .","title":"Install TACTIC on Windows Server"},{"location":"install-tactic-windows-server/#install-postgresql","text":"Download the latest version from the PostgreSQL site . The visual installer is recommended as it is easy to use. The visual installer will have you set the following settings: Password for postgres superuser PostgreSQL data folder PostgreSQL port Note: It is recomended to install PostgreSQL on the default port 5432. Note: You will need the password when connecting with TACTIC later in the installation. After installing PostgreSQL, add the psql executable to the system PATH variable. You will need to add the path, PostgreSQL install dir \\bin For example, C:\\Program Files\\PostgreSQL\\12\\bin See \"System PATH variable\" for instructions to edit the PATH variable. Test that PostgreSQL was added to the system PATH variable running the command, psql Finally, for the TACTIC installation, backup the file, PostgreSQL install dir \\data\\pg_hba.conf and replace with, TACTIC source code \\src\\install\\postgresql\\pg_hba.conf Restart PostgreSQL from the Services manager.","title":"Install PostgreSQL"},{"location":"install-tactic-windows-server/#install-python-3-and-supporting-modules","text":"Download the installer from the Python website . Python 3.7+ is reccomended for TACTIC 4.7. Run the installer. Add the Python executable to the system PATH variable: Python install dir This could vary based on your installation. For example, C:\\Users\\Adminstrator\\AppData\\Local\\Programs\\Python\\Python37 Test that Python was added to the system PATH variable by running the command: python You should get the following output, C:\\Users\\Administrator python Python 3.7.5 (tags/v3.7.5:5c02a39a0b, Oct 15 2019, 00:11:34) [MSC v.1916 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. Install supporting support with pip. In the command prompt, run the following command, python -m pip install pillow lxml pycryptodomex requests jaraco.windows pytz pywin32 If you are installing with PostgreSQL, install the Python PostgreSQL connectivity module, python -m pip install psycopg2","title":"Install Python 3 and supporting modules"},{"location":"install-tactic-windows-server/#install-image-utilities-imagemagick-and-ffmpeg","text":"Download ImageMagick and run the installation wizard. Be sure to select the following options during installation: Install FFMPEG Install legacy utilities Add to System PATH variable","title":"Install Image Utilities ImageMagick and FFMPEG"},{"location":"install-tactic-windows-server/#install-http-apache","text":"Visit the Apache website and download installation files for Windows . Unzip the installation achive and place the Apache folder in C, C:\\Apache24 Install the Apache service by running the command, C:\\Apache24\\bin\\httpd.exe -k install Start the Apache service from the Services manager and test Apache by visiting \"127.0.0.1\" in browser.","title":"Install HTTP Apache"},{"location":"install-tactic-windows-server/#install-tactic","text":"Execute install.py from the TACTIC source code: python TACTIC source code dir \\src\\install\\install.py Note: The installation requires write permission to C:\\ProgramFiles and C:\\ProgramData and you may need to run this with adminstrator priviledges. During the installation, you will set the TACTIC Install Directory. Test the installation by opening a command prompt and running, python TACTIC Install Directory \\src\\bin\\startup_dev.py","title":"Install TACTIC"},{"location":"install-tactic-windows-server/#configure-postgresql","text":"For ease of installation, the provided TACTIC pg_hba.conf file configures PostgreSQL to not use a password. To reconfigure PostgreSQL to use the password set during PostgreSQL installation, replace the TACTIC pg_hba.conf file with the original. Restart PostgreSLQ after replacing with the original file.","title":"Configure PostgreSQL"},{"location":"install-tactic-windows-server/#configure-http-apache","text":"Enable Apache Modules In the file, C:\\Apache24\\conf\\httpd.conf Make sure the following lines are uncommented, LoadModule rewrite_module modules/mod_rewrite.so LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_http_module modules/mod_proxy_http.so LoadModule proxy_balancer_module modules/mod_proxy_balancer.so LoadModule deflate_module modules/mod_deflate.so LoadModule slotmem_shm_module modules/mod_slotmem_shm.so LoadModule filter_module modules/mod_filter.so LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so These lines may already be uncommented, depending on your distribution and version of Apache. You need version 2.0.31 or later. Enable TACTIC Apache Configuration An Apache configuration file for TACTIC is generated during installation. This file must be copied into the Apache configuration folder. Copy, C:\\ProgramData\\Southpaw\\Tactic\\config\\tactic_win32.conf Into, C:\\Apache24\\conf\\ Include the TACTIC configuration file in the Apache configuration file. Edit C:\\Apache24\\conf\\httpd.conf Add the following line to the end of this file, Include conf/tactic_win32.conf Restart the Apache service","title":"Configure HTTP Apache"},{"location":"install-tactic-windows-server/#fix-for-python-windows-service","text":"The TACTIC Windows service is installed during installation with install.py Unfortunately, at the time this documentation has been last updated, you will need to adjust the Python pywin32 module. Copy contents from, Python install directory \\Python37\\Lib\\site-packages\\pywin32_system32 into, Python install directory \\Python37\\Lib\\site-packages\\win32 You should now be able to start the TACTIC service from the Services manager. If the service fails to start, you can try to debug by running the command, python TACTIC Install Directory \\src\\install\\service\\win32_service.py debug","title":"Fix for Python Windows Service"},{"location":"install-tactic-windows-server/#system-path-variable","text":"To update the system PATH variable on Windows, navigate to, Start Control Panel System and Security System Advanced system settings Click Environment Variables, under System variables select the \"path\" variable, and \"Edit\".","title":"System PATH Variable"},{"location":"ldap/","text":"Documentation coming soon","title":"Ldap"},{"location":"load-balancing-tactic/","text":"Load-Balancing TACTIC TACTIC runs on a multi-threaded application server (\"Cherrypy\"), but this application server uses Python threads and not system threads. This means that all of the threads in a single python process run on the same processor. To overcome this limitation, you should run a number of full TACTIC processes across a number of different ports and allow the webserver to load-balance requests across these ports. This document describes to how configure load balancing with HTTP Apache. Configure TACTIC By default in the the TACTIC configuration file has process count is set to 3. Add this entry if it does not exist. services ... process_count 3 /process_count ... /services For large deployments, you will need to increase the process count. Reccomended settings are as follows: Small-sized team ( 20 users): 3 processes Medium-sized team (20-150 users): 5 processes Large-sized team ( 150+ users): 10+ processes The processes should not exceed the number of the CPUs on the server by more than one. For example, if the server has 4 CPUs, set the process count to 5. Restart the TACTIC service after configuration. Configure HTTP Apache You can configure Apache for Load Balancing using the Proxy Balancer module or the ReWriteRule. Note Warning: For load balancing, only use either: 1) the Proxy Balancer method (recommended) or 2) the RewriteRule method (not recommended). Do not use both methods at the same time. Apache Proxy Balancer The first way (recommended way) is to make use of Apache\u2019s proxy_balancer_module . Ensure it is already enabled in the main Apache config file in /etc/httpd/conf/httpd.conf. In the tactic.conf file (provided with the TACTIC installation usually placed near the Apache 2 installation config area like /etc/httpd/conf.d/.. or /etc/apache2/..), make sure these lines below are present. This set-up corresponds to a process_count of 3 in the tactic.conf file. If there are more, you just have to add more*BalancerMember* line accordingly. ProxyPreserveHost on # Using the ProxyPass directives Proxy balancer://tactic BalancerMember http://localhost:8081/tactic BalancerMember http://localhost:8082/tactic BalancerMember http://localhost:8083/tactic /Proxy ProxyPass /tactic balancer://tactic ProxyPass /projects balancer://tactic This method is more desirable as it doesn\u2019t need the load_balance.txt required for the second method. In addition, it is mandatory if the process_time_alive directive is used under services in the TACTIC config file in /home/apache/projects/config/tactic_linux-conf.xml. Restart the Apache service after configuration. Apache ReWriteRule The second way (old way) is to make use of Apache\u2019s rewrite_module . In the tactic.conf file (provided with the TACTIC installation usually placed near the Apache 2 installation config area like /etc/httpd/conf.d/.. or /etc/apache2/..), comment out the lines under \"for cherrypy\": # for cherrypy #RewriteRule ^/tactic/(.+)$ http://localhost:8081/tactic/$1 [P,L] #RewriteRule ^/tactic http://localhost:8081/tactic/ [P,L] #RewriteRule ^/projects/(.+)$ http://localhost:8081/tactic/$1 [P,L] #RewriteRule ^/projects http://localhost:8081/tactic/ [P,L] Then in the same file uncomment the lines for the random load balancing scheme: # This is for using a random load_balancing scheme RewriteMap lb rnd:/home/apache/sites/load_balance.txt RewriteRule ^/tactic/(.+)$ http://${lb:dynamic}/tactic/$1 [P,L] RewriteRule ^/projects/(.+)$ http://${lb:dynamic}/tactic/$1 [P,L] RewriteRule ^/tactic http://${lb:dynamic}/tactic/ [P,L] RewriteRule ^/projects http://${lb:dynamic}/tactic/ [P,L] These lines will look at the file \u201c/home/apache/sites/load_balance.txt\u201d to find out how to replace the variable $\\{lb:dynamic} with a randomly chosen value from a list. Note: The path for load_balance.txt cannot have spaces in it or Apache service will not start. A sample load_balance.txt file looks like the following: ## ## load_balance.txt -- rewriting map ## dynamic localhost:8081|localhost:8082|localhost:8083 The process_count being set to 3 corresponds to the three processes running at port 8081, 8082, 8083 respectively. You can see the three startup.py processes by running: ps -wef | grep python The higher the process_count is set, the more memory is needed in the system. If you set it to 10 for heavier usage, the load_balance.txt should look like this: ## this is in one line in the file dynamic localhost:8081|localhost:8082|localhost:8083|localhost:8084|localhost:8085|localhost:8086 |localhost:8087|localhost:8088|localhost:8089|localhost:8090 Restart the Apache service after configuration.","title":"Load Balancing Tactic"},{"location":"load-balancing-tactic/#load-balancing-tactic","text":"TACTIC runs on a multi-threaded application server (\"Cherrypy\"), but this application server uses Python threads and not system threads. This means that all of the threads in a single python process run on the same processor. To overcome this limitation, you should run a number of full TACTIC processes across a number of different ports and allow the webserver to load-balance requests across these ports. This document describes to how configure load balancing with HTTP Apache.","title":"Load-Balancing TACTIC"},{"location":"load-balancing-tactic/#configure-tactic","text":"By default in the the TACTIC configuration file has process count is set to 3. Add this entry if it does not exist. services ... process_count 3 /process_count ... /services For large deployments, you will need to increase the process count. Reccomended settings are as follows: Small-sized team ( 20 users): 3 processes Medium-sized team (20-150 users): 5 processes Large-sized team ( 150+ users): 10+ processes The processes should not exceed the number of the CPUs on the server by more than one. For example, if the server has 4 CPUs, set the process count to 5. Restart the TACTIC service after configuration.","title":"Configure TACTIC"},{"location":"load-balancing-tactic/#configure-http-apache","text":"You can configure Apache for Load Balancing using the Proxy Balancer module or the ReWriteRule. Note Warning: For load balancing, only use either: 1) the Proxy Balancer method (recommended) or 2) the RewriteRule method (not recommended). Do not use both methods at the same time.","title":"Configure HTTP Apache"},{"location":"load-balancing-tactic/#apache-proxy-balancer","text":"The first way (recommended way) is to make use of Apache\u2019s proxy_balancer_module . Ensure it is already enabled in the main Apache config file in /etc/httpd/conf/httpd.conf. In the tactic.conf file (provided with the TACTIC installation usually placed near the Apache 2 installation config area like /etc/httpd/conf.d/.. or /etc/apache2/..), make sure these lines below are present. This set-up corresponds to a process_count of 3 in the tactic.conf file. If there are more, you just have to add more*BalancerMember* line accordingly. ProxyPreserveHost on # Using the ProxyPass directives Proxy balancer://tactic BalancerMember http://localhost:8081/tactic BalancerMember http://localhost:8082/tactic BalancerMember http://localhost:8083/tactic /Proxy ProxyPass /tactic balancer://tactic ProxyPass /projects balancer://tactic This method is more desirable as it doesn\u2019t need the load_balance.txt required for the second method. In addition, it is mandatory if the process_time_alive directive is used under services in the TACTIC config file in /home/apache/projects/config/tactic_linux-conf.xml. Restart the Apache service after configuration.","title":"Apache Proxy Balancer"},{"location":"load-balancing-tactic/#apache-rewriterule","text":"The second way (old way) is to make use of Apache\u2019s rewrite_module . In the tactic.conf file (provided with the TACTIC installation usually placed near the Apache 2 installation config area like /etc/httpd/conf.d/.. or /etc/apache2/..), comment out the lines under \"for cherrypy\": # for cherrypy #RewriteRule ^/tactic/(.+)$ http://localhost:8081/tactic/$1 [P,L] #RewriteRule ^/tactic http://localhost:8081/tactic/ [P,L] #RewriteRule ^/projects/(.+)$ http://localhost:8081/tactic/$1 [P,L] #RewriteRule ^/projects http://localhost:8081/tactic/ [P,L] Then in the same file uncomment the lines for the random load balancing scheme: # This is for using a random load_balancing scheme RewriteMap lb rnd:/home/apache/sites/load_balance.txt RewriteRule ^/tactic/(.+)$ http://${lb:dynamic}/tactic/$1 [P,L] RewriteRule ^/projects/(.+)$ http://${lb:dynamic}/tactic/$1 [P,L] RewriteRule ^/tactic http://${lb:dynamic}/tactic/ [P,L] RewriteRule ^/projects http://${lb:dynamic}/tactic/ [P,L] These lines will look at the file \u201c/home/apache/sites/load_balance.txt\u201d to find out how to replace the variable $\\{lb:dynamic} with a randomly chosen value from a list. Note: The path for load_balance.txt cannot have spaces in it or Apache service will not start. A sample load_balance.txt file looks like the following: ## ## load_balance.txt -- rewriting map ## dynamic localhost:8081|localhost:8082|localhost:8083 The process_count being set to 3 corresponds to the three processes running at port 8081, 8082, 8083 respectively. You can see the three startup.py processes by running: ps -wef | grep python The higher the process_count is set, the more memory is needed in the system. If you set it to 10 for heavier usage, the load_balance.txt should look like this: ## this is in one line in the file dynamic localhost:8081|localhost:8082|localhost:8083|localhost:8084|localhost:8085|localhost:8086 |localhost:8087|localhost:8088|localhost:8089|localhost:8090 Restart the Apache service after configuration.","title":"Apache ReWriteRule"},{"location":"maintenance-logs/","text":"Configure Logrotate In a default installation tactic stores its logs in a single file. For proper maintenance, this file must be rotated by the host operating system. This action must be set in the host operating system. The host operating system must have a facility to rotate text logs on a regular chronological basis. Logrotate is used as a tool to rotate text files on a chronological basis. The tool allows automatic rotation, compression, removal and mailing of log files. Directives This is a partial list of logrotate directives. missingok : If the log file is missing, go on to the next log file without issuing an error message. copytruncate : Truncate the original log file to zero size in place after creating a copy, instead of moving the old log file and optionally creating a new one rotate 7 : Log files are rotated 7 times before being removed or mailed to the address specified in a mail directive. If count is 0, old versions are removed rather then rotated. compress : Old versions of log files are compressed with gzip to save disk space. notifempty : Do not rotate the log if it is empty sharedscripts postrotate /etc/init.d/lighttpd reload endscript : Default configuration Logrotate\u2019s main configuration file /etc/logrotate.conf Applies the main configuration settings from this file to all log rotation settings, unless overridden by individual directives on a per-log basis. # see \"man logrotate\" for details # rotate log files weekly weekly # keep 4 weeks worth of backlogs rotate 4 # create new (empty) log files after rotating old ones create # uncomment this if you want your log files compressed #compress # RPM packages drop log rotation information into this directory include /etc/logrotate.d # no packages own wtmp -- we'll rotate them here /var/log/wtmp { monthly create 0664 root utmp rotate 1 } Example Service Configuration This is an example logrotate configuration for HTTP. The configuration file is `/etc/logrotate.d/httpd ` /var/log/httpd/*.log { weekly rotate 52 compress missingok notifempty sharedscripts postrotate /bin/kill -HUP `cat /var/run/httpd.pid 2 /dev/null` 2 /dev/null || true endscript } On the example linux system, service or server specific configurations are stored in /etc/logrotate.d directory. In this example, HTTP logs are not deleted until they are at least a year old, and are rotated on a weekly basis. There are other configuration options available, but they will not be discussed in this tutorial. Please look online for more information on these other options. Depending on the requirement, each log file may be handled at different intervals. The lines between postrotate and endscript (both of which must appear on lines by themselves) are executed after the log file is rotated. These directives may only appear inside a log file definition. In our case we are reloading lighttpd. Example TACTIC configuration The configuration goal is get logrotate to get the tactic log files rotated for our needs and requirements. This is an example logrotate configuration for TACTIC. The configuration file is `/etc/logrotate.d/tactic ` Remember to restart the logrotate services after any additions to logrotate configuration. /home/apache/tacticTemp/log/stdout.log { notifempty daily rotate 365 missingok copytruncate create 0600 apache apache }","title":"Configure Logrotate"},{"location":"maintenance-logs/#configure-logrotate","text":"In a default installation tactic stores its logs in a single file. For proper maintenance, this file must be rotated by the host operating system. This action must be set in the host operating system. The host operating system must have a facility to rotate text logs on a regular chronological basis. Logrotate is used as a tool to rotate text files on a chronological basis. The tool allows automatic rotation, compression, removal and mailing of log files.","title":"Configure Logrotate"},{"location":"maintenance-logs/#directives","text":"This is a partial list of logrotate directives. missingok : If the log file is missing, go on to the next log file without issuing an error message. copytruncate : Truncate the original log file to zero size in place after creating a copy, instead of moving the old log file and optionally creating a new one rotate 7 : Log files are rotated 7 times before being removed or mailed to the address specified in a mail directive. If count is 0, old versions are removed rather then rotated. compress : Old versions of log files are compressed with gzip to save disk space. notifempty : Do not rotate the log if it is empty sharedscripts postrotate /etc/init.d/lighttpd reload endscript :","title":"Directives"},{"location":"maintenance-logs/#default-configuration","text":"Logrotate\u2019s main configuration file /etc/logrotate.conf Applies the main configuration settings from this file to all log rotation settings, unless overridden by individual directives on a per-log basis. # see \"man logrotate\" for details # rotate log files weekly weekly # keep 4 weeks worth of backlogs rotate 4 # create new (empty) log files after rotating old ones create # uncomment this if you want your log files compressed #compress # RPM packages drop log rotation information into this directory include /etc/logrotate.d # no packages own wtmp -- we'll rotate them here /var/log/wtmp { monthly create 0664 root utmp rotate 1 }","title":"Default configuration"},{"location":"maintenance-logs/#example-service-configuration","text":"This is an example logrotate configuration for HTTP. The configuration file is `/etc/logrotate.d/httpd ` /var/log/httpd/*.log { weekly rotate 52 compress missingok notifempty sharedscripts postrotate /bin/kill -HUP `cat /var/run/httpd.pid 2 /dev/null` 2 /dev/null || true endscript } On the example linux system, service or server specific configurations are stored in /etc/logrotate.d directory. In this example, HTTP logs are not deleted until they are at least a year old, and are rotated on a weekly basis. There are other configuration options available, but they will not be discussed in this tutorial. Please look online for more information on these other options. Depending on the requirement, each log file may be handled at different intervals. The lines between postrotate and endscript (both of which must appear on lines by themselves) are executed after the log file is rotated. These directives may only appear inside a log file definition. In our case we are reloading lighttpd.","title":"Example Service Configuration"},{"location":"maintenance-logs/#example-tactic-configuration","text":"The configuration goal is get logrotate to get the tactic log files rotated for our needs and requirements. This is an example logrotate configuration for TACTIC. The configuration file is `/etc/logrotate.d/tactic ` Remember to restart the logrotate services after any additions to logrotate configuration. /home/apache/tacticTemp/log/stdout.log { notifempty daily rotate 365 missingok copytruncate create 0600 apache apache }","title":"Example TACTIC configuration"},{"location":"monitor-server-performance/","text":"Monitor Server Performance","title":"Monitor Server Performance"},{"location":"monitor-server-performance/#monitor-server-performance","text":"","title":"Monitor Server Performance"},{"location":"multiple-tactic-services/","text":"Running Multiple Versions of TACTIC Multiple versions of TACTIC can be easily run side by side on the same machine. This is extremely useful for testing purposes. Running a newer version of TACTIC on a production server machine using the production server environment and production database. You can run this without interrupting service ot the production server. If this is not explicitly set, TACTIC will use whatever settings exist when TACTIC was first installed. These are defined in the tacticenv module which is first imported on all command line TACTIC scripts by: import tacticenv These values are typically found in the Python distribution site-packages. The exact location of these files can vary between differing operarting systems, but common examples are: windows: C:\\Python27\\site-packages\\Lib\\site-packages\\tacticenv linux: /usr/lib/python2.7/site-packages When TACTIC starts up, it will first look at the environment variable TACTIC_INTALL_DIR to determine which distribution of TACTIC will be used. Before a newer version of TACTIC is executed, it is necessary to upgrade to the newer database schema. Unless clearly stated in the distribution release, it is always safe to upgrade the database for a newer version. Changes to the database are always backwards compatible, so that older versions of TACTIC can always run on newer schema of the database. Steps Unzip a TACTIC distribution anywhere in the file system. For purposes of examples, /home/apache will be used as the base directory for TACTIC cd /home/apache unzip tactic-3.0.0.zip Set the environment variable TACTIC_INSTALL_DIR export TACTIC_INSTALL_DIR=/home/apache/tactic-3.0.0 Upgrade the database. su apache cd tactic-3.0.0.src/bin python3 upgrade_db.py Execute tactic python3 startup_dev.py This will execute TACTIC from the command line in dev mode. All output will go to this console.","title":"Multiple TACTIC Versions"},{"location":"multiple-tactic-services/#running-multiple-versions-of-tactic","text":"Multiple versions of TACTIC can be easily run side by side on the same machine. This is extremely useful for testing purposes. Running a newer version of TACTIC on a production server machine using the production server environment and production database. You can run this without interrupting service ot the production server. If this is not explicitly set, TACTIC will use whatever settings exist when TACTIC was first installed. These are defined in the tacticenv module which is first imported on all command line TACTIC scripts by: import tacticenv These values are typically found in the Python distribution site-packages. The exact location of these files can vary between differing operarting systems, but common examples are: windows: C:\\Python27\\site-packages\\Lib\\site-packages\\tacticenv linux: /usr/lib/python2.7/site-packages When TACTIC starts up, it will first look at the environment variable TACTIC_INTALL_DIR to determine which distribution of TACTIC will be used. Before a newer version of TACTIC is executed, it is necessary to upgrade to the newer database schema. Unless clearly stated in the distribution release, it is always safe to upgrade the database for a newer version. Changes to the database are always backwards compatible, so that older versions of TACTIC can always run on newer schema of the database. Steps Unzip a TACTIC distribution anywhere in the file system. For purposes of examples, /home/apache will be used as the base directory for TACTIC cd /home/apache unzip tactic-3.0.0.zip Set the environment variable TACTIC_INSTALL_DIR export TACTIC_INSTALL_DIR=/home/apache/tactic-3.0.0 Upgrade the database. su apache cd tactic-3.0.0.src/bin python3 upgrade_db.py Execute tactic python3 startup_dev.py This will execute TACTIC from the command line in dev mode. All output will go to this console.","title":"Running Multiple Versions of TACTIC"},{"location":"resource/","text":"Database Resource TACTIC can map to any supported database platform. A single TACTIC installation can map on to any number of external databases and use them as a database resource. These database resources are treated as first class citizens in the TACTIC. All of the features that are inherent to any native TACTIC data are also available to these external database resources. To implement this functionality, db_resource can be used to connect a project to a database resource. It defines the location and connection credentials to access a database server. Database resources can be added under the side bar menu Global \u2192 Database Resource . Specify (or look up) the Database Resource under Admin Views \u2192 Global . The database resource entry in Database Resource contains all the information needed to connect to a database. In order for TACTIC to access another database, it has to have a database resource registered and then it has to be mapped to a project. In the example below, the new database\u2019s code is named: my_new_db_resource , which is the reference of this entry. Host, which refers to the IP address of the server, is set to be a tested address. The Login and Password are the information used to log in the database. Since all TACTIC projects have a single database resource that it uses as a persistent store for sObjects. By default, the project will use the same resource as the sthpw database and is defined in the TACTIC config file. However, this can be configured to point to another database resource. Note that the search type uses a project to find the corresponding database. Any project configured to look at a database resource with the db_resource and database columns. The db resource defines the connection criteria and the column determines which database to connect to that resource. To add new a database as pure resource database, Specify (or look up) the 'Add Project' and 'Projects' columns under Admin Views \u2192 Global \u2192 Database Resource . In the example below, the new database called test_database001 from the db_resource my_new_db_resource has been added to a Project called Testing . For a project to become a full TACTIC project (complete with separate URL space: http:// server / project gt; and separate themes an interfaces), all that is required is the config tables to exist in that database resource. Thus a database resource can start off as a data source and then, at any time, be upgraded to a full TACTIC project if that is ever required by importing the appropriate config tables that the search type uses in the project to find the corresponding database. The project is configured to look at a database resource with the db_resource and database column. The db resource defines the connection criteria and the column determines which database to connect to on that resource. In order for TACTIC to access another database, it has to have a database resource registered and then it has to be mapped to a project. This mapping is currently required because all search types are scoped and searched using the notation: namespace / table ?project= project code= code An example search_type entry would be: jobs/media?project=my_test_project","title":"Database Resources"},{"location":"resource/#database-resource","text":"TACTIC can map to any supported database platform. A single TACTIC installation can map on to any number of external databases and use them as a database resource. These database resources are treated as first class citizens in the TACTIC. All of the features that are inherent to any native TACTIC data are also available to these external database resources. To implement this functionality, db_resource can be used to connect a project to a database resource. It defines the location and connection credentials to access a database server. Database resources can be added under the side bar menu Global \u2192 Database Resource . Specify (or look up) the Database Resource under Admin Views \u2192 Global . The database resource entry in Database Resource contains all the information needed to connect to a database. In order for TACTIC to access another database, it has to have a database resource registered and then it has to be mapped to a project. In the example below, the new database\u2019s code is named: my_new_db_resource , which is the reference of this entry. Host, which refers to the IP address of the server, is set to be a tested address. The Login and Password are the information used to log in the database. Since all TACTIC projects have a single database resource that it uses as a persistent store for sObjects. By default, the project will use the same resource as the sthpw database and is defined in the TACTIC config file. However, this can be configured to point to another database resource. Note that the search type uses a project to find the corresponding database. Any project configured to look at a database resource with the db_resource and database columns. The db resource defines the connection criteria and the column determines which database to connect to that resource. To add new a database as pure resource database, Specify (or look up) the 'Add Project' and 'Projects' columns under Admin Views \u2192 Global \u2192 Database Resource . In the example below, the new database called test_database001 from the db_resource my_new_db_resource has been added to a Project called Testing . For a project to become a full TACTIC project (complete with separate URL space: http:// server / project gt; and separate themes an interfaces), all that is required is the config tables to exist in that database resource. Thus a database resource can start off as a data source and then, at any time, be upgraded to a full TACTIC project if that is ever required by importing the appropriate config tables that the search type uses in the project to find the corresponding database. The project is configured to look at a database resource with the db_resource and database column. The db resource defines the connection criteria and the column determines which database to connect to on that resource. In order for TACTIC to access another database, it has to have a database resource registered and then it has to be mapped to a project. This mapping is currently required because all search types are scoped and searched using the notation: namespace / table ?project= project code= code An example search_type entry would be: jobs/media?project=my_test_project","title":"Database Resource"},{"location":"setup-email/","text":"Setup Email Configuration In order to send out notifications as email in TACTIC, the mailserver must be configured in TACTIC. Below is an example of a mailserver configuration in the TACTIC configuration file. See Configuration Directives Services for a full list of directives. Example, services ... mailserver smtp.googlemail.com /mailserver mail_tls_enabled true /mail_tls_enabled mail_name TACTIC /mail_name mail_user tactic@southpawtech.com /mail_user mail_password password /mail_password mail_port 587 /mail_port mail_default_admin_email admin@southpawtech.com /mail_default_admin_email notify_user exceptions@southpawtech.com /notify_user ... /services Test Notifications Go to the Notifications view under: Admin Views \u2192 Site Admin \u2192 Notifications Click on the green plus button on the tool shelf to insert new a notification. Fill in the following the minimum fields to create a test notification: Click on the Email Test button to send out a test email to the recipient. For further details on setting up advanced notifications, please refer to the doc titled: Advanced Notification Setup .","title":"Email / Mailserver"},{"location":"setup-email/#setup-email","text":"","title":"Setup Email"},{"location":"setup-email/#configuration","text":"In order to send out notifications as email in TACTIC, the mailserver must be configured in TACTIC. Below is an example of a mailserver configuration in the TACTIC configuration file. See Configuration Directives Services for a full list of directives. Example, services ... mailserver smtp.googlemail.com /mailserver mail_tls_enabled true /mail_tls_enabled mail_name TACTIC /mail_name mail_user tactic@southpawtech.com /mail_user mail_password password /mail_password mail_port 587 /mail_port mail_default_admin_email admin@southpawtech.com /mail_default_admin_email notify_user exceptions@southpawtech.com /notify_user ... /services","title":"Configuration"},{"location":"setup-email/#test-notifications","text":"Go to the Notifications view under: Admin Views \u2192 Site Admin \u2192 Notifications Click on the green plus button on the tool shelf to insert new a notification. Fill in the following the minimum fields to create a test notification: Click on the Email Test button to send out a test email to the recipient. For further details on setting up advanced notifications, please refer to the doc titled: Advanced Notification Setup .","title":"Test Notifications"},{"location":"system-requirements/","text":"TACTIC System Requirements Client Computer Requirements Supported Operating Systems Windows MAC OS Linux Smartphones Tablets Note - The main criteria in the majority of cases for TACTIC access is the web browser. TACTIC is a cross platform solution. Supported Browsers Chrome (Officially Supported) Safari (Compatible) Mozilla Firefox 33.0+ (Compatible) Internet Explorer 11.0+ (compatible for everyday usage - HTML5 support is limited on IE) Note - Other web browsers may work but are not certified for TACTIC. Required Browser Plugins We have moved away from needing the Java plugin in our latest release, and instead, have moved on to using HTML5 in its place. This was done to remove external dependencies and create a better user experience. However, depending on the version of TACTIC that you use, the Java plugin may be used in many cases to communicate with the client computer\u2019s operating system. This plugin is used primarily in application integration to pass files through the client web browser to and from the TACTIC server. To download the latest version of the Java plugin, go to http://www.java.com Server Requirements Typical TACTIC Server Configurations Small Shop: Less than 10 Users Medium Content Creation: 10 - 50 Users Large Scale Content Creation: 50 - 150 Users Enterprise Business: More than 150 users High Availability: High service availability (99.9% Up-time guarantee) Remote Collaboration: Live World Wide Production Small Shop ( 10 Users) A small cloud business might need to track lists of information, tasks, notes and general production data. Simple files can also be tracked. TACTIC Server recommendations: Single computer configuration with all the services installed on the same machine. Online cloud service or in-house installation CPU - Dual Core processor RAM - At least 600MB ram HDD - 10GB (+ asset storage requirements) 3 TACTIC Process for load balancing Medium Content Creation ( 50 Users) Dual server computer configuration with TACTIC. Database and web server on one computer and a separate fileserver. Examples include content creation departments, visual effects studios, media management solutions. TACTIC Server CPU - Dual or Quad core processor RAM - 4-8GB ram HDD - 10GB 8 TACTIC Process for load balancing File Server SAN or Fileserver with adequate storage based on project requirements. Note that TACTIC generates a more efficient file system so space is used more efficiently. Large Scale Content Creation ( 150 Users) Represented by companies who have a 100+ team producing and managing complex assets and production data. Examples include large content creation departments, feature film and episodic CG production. TACTIC Server 1-2 Servers CPU - Quad core processor RAM - 8GB+ ram HDD - 10GB 3 TACTIC Process for load balancing File Server SAN or Fileserver with adequate storage based on project requirements. Note that TACTIC generates a more efficient file system so space is used more efficiently. Enterprise Business (150+ Users) In large scale enterprise scenarios, the scalability features in TACTIC are heavily used to accommodate the high bandwidth demands of enterprise business. TACTIC Server Multiple Servers CPU - Quad core processor RAM - 8GB+ ram HDD - 10GB 10+ TACTIC Process for load balancing on each server File Server SAN or File server with adequate storage based on project requirements. Note that TACTIC generates a more efficient file-system so space is used more efficiently. w Single database server allowing for multiple physical TACTIC servers. High Availability - Up-time Guarantee In almost any size business, there may be a requirement for TACTIC to be a high availability service. The main aspect of configuring TACTIC with this approach is providing redundant services at all levels. TACTIC Server 2+ Physical TACTIC servers with redundant power, HDD etc. CPU - Quad core processor RAM - 8GB+ ram HDD - 10GB 8+ TACTIC Process for load balancing per server File Server SAN or File server with adequate storage based on project requirements. Redundant data retention for file system up-time. Database Server 2+ database servers setup with replication for database up-time. Return to section top Remote Collaboration (World wide production) TACTIC is a web based enterprise application which can be scaled out to provide seamless collaboration between physical locations using common database and file system technology and practices. TACTIC Server Master Physical TACTIC server CPU - Quad core processor RAM - 4GB+ ram HDD - 10GB 8+ TACTIC Process for load balancing per server Remote collaboration server(s) CPU - Quad core processor RAM - 4GB+ ram HDD - 10GB 3+ TACTIC Process for load balancing File Server Master file server Base central file server Remote File Server(s) Synchronized through common protocols or through specific processes/triggers in TACTIC TACTIC Server Installation Requirements Supported Operating Systems Fedora 12+ CentOS 5.5+ Windows Server 2008 or later TACTIC has been set-up on a wide variety of operating systems. Our documentation provides detailed instructions on the above, however, it is left to the user to install on others. API Python 2.7+ Javascript (Client side Interaction) Web Servers HTTP Apache 2.2+ IIS 7+ Database TACTIC Database Configuration Installation Process Requirements What sort of access do you need to complete a full TACTIC installation and implementation? A physical of virtual server dedicated to TACTIC Root Access to the server Knowledge of the current network infrastructure Ability to install Modules etc Knowledge of Python is a plus","title":"System Requirements"},{"location":"system-requirements/#tactic-system-requirements","text":"","title":"TACTIC System Requirements"},{"location":"system-requirements/#client-computer-requirements","text":"Supported Operating Systems Windows MAC OS Linux Smartphones Tablets Note - The main criteria in the majority of cases for TACTIC access is the web browser. TACTIC is a cross platform solution. Supported Browsers Chrome (Officially Supported) Safari (Compatible) Mozilla Firefox 33.0+ (Compatible) Internet Explorer 11.0+ (compatible for everyday usage - HTML5 support is limited on IE) Note - Other web browsers may work but are not certified for TACTIC. Required Browser Plugins We have moved away from needing the Java plugin in our latest release, and instead, have moved on to using HTML5 in its place. This was done to remove external dependencies and create a better user experience. However, depending on the version of TACTIC that you use, the Java plugin may be used in many cases to communicate with the client computer\u2019s operating system. This plugin is used primarily in application integration to pass files through the client web browser to and from the TACTIC server. To download the latest version of the Java plugin, go to http://www.java.com","title":"Client Computer Requirements"},{"location":"system-requirements/#server-requirements","text":"Typical TACTIC Server Configurations Small Shop: Less than 10 Users Medium Content Creation: 10 - 50 Users Large Scale Content Creation: 50 - 150 Users Enterprise Business: More than 150 users High Availability: High service availability (99.9% Up-time guarantee) Remote Collaboration: Live World Wide Production Small Shop ( 10 Users) A small cloud business might need to track lists of information, tasks, notes and general production data. Simple files can also be tracked. TACTIC Server recommendations: Single computer configuration with all the services installed on the same machine. Online cloud service or in-house installation CPU - Dual Core processor RAM - At least 600MB ram HDD - 10GB (+ asset storage requirements) 3 TACTIC Process for load balancing Medium Content Creation ( 50 Users) Dual server computer configuration with TACTIC. Database and web server on one computer and a separate fileserver. Examples include content creation departments, visual effects studios, media management solutions. TACTIC Server CPU - Dual or Quad core processor RAM - 4-8GB ram HDD - 10GB 8 TACTIC Process for load balancing File Server SAN or Fileserver with adequate storage based on project requirements. Note that TACTIC generates a more efficient file system so space is used more efficiently. Large Scale Content Creation ( 150 Users) Represented by companies who have a 100+ team producing and managing complex assets and production data. Examples include large content creation departments, feature film and episodic CG production. TACTIC Server 1-2 Servers CPU - Quad core processor RAM - 8GB+ ram HDD - 10GB 3 TACTIC Process for load balancing File Server SAN or Fileserver with adequate storage based on project requirements. Note that TACTIC generates a more efficient file system so space is used more efficiently. Enterprise Business (150+ Users) In large scale enterprise scenarios, the scalability features in TACTIC are heavily used to accommodate the high bandwidth demands of enterprise business. TACTIC Server Multiple Servers CPU - Quad core processor RAM - 8GB+ ram HDD - 10GB 10+ TACTIC Process for load balancing on each server File Server SAN or File server with adequate storage based on project requirements. Note that TACTIC generates a more efficient file-system so space is used more efficiently. w Single database server allowing for multiple physical TACTIC servers. High Availability - Up-time Guarantee In almost any size business, there may be a requirement for TACTIC to be a high availability service. The main aspect of configuring TACTIC with this approach is providing redundant services at all levels. TACTIC Server 2+ Physical TACTIC servers with redundant power, HDD etc. CPU - Quad core processor RAM - 8GB+ ram HDD - 10GB 8+ TACTIC Process for load balancing per server File Server SAN or File server with adequate storage based on project requirements. Redundant data retention for file system up-time. Database Server 2+ database servers setup with replication for database up-time. Return to section top Remote Collaboration (World wide production) TACTIC is a web based enterprise application which can be scaled out to provide seamless collaboration between physical locations using common database and file system technology and practices. TACTIC Server Master Physical TACTIC server CPU - Quad core processor RAM - 4GB+ ram HDD - 10GB 8+ TACTIC Process for load balancing per server Remote collaboration server(s) CPU - Quad core processor RAM - 4GB+ ram HDD - 10GB 3+ TACTIC Process for load balancing File Server Master file server Base central file server Remote File Server(s) Synchronized through common protocols or through specific processes/triggers in TACTIC","title":"Server Requirements"},{"location":"system-requirements/#tactic-server-installation-requirements","text":"Supported Operating Systems Fedora 12+ CentOS 5.5+ Windows Server 2008 or later TACTIC has been set-up on a wide variety of operating systems. Our documentation provides detailed instructions on the above, however, it is left to the user to install on others. API Python 2.7+ Javascript (Client side Interaction) Web Servers HTTP Apache 2.2+ IIS 7+ Database TACTIC Database Configuration","title":"TACTIC Server Installation Requirements"},{"location":"system-requirements/#installation-process-requirements","text":"What sort of access do you need to complete a full TACTIC installation and implementation? A physical of virtual server dedicated to TACTIC Root Access to the server Knowledge of the current network infrastructure Ability to install Modules etc Knowledge of Python is a plus","title":"Installation Process Requirements"},{"location":"troubleshooting-tactic/","text":"TACTIC Service Troubleshooting FAQ I get a proxy error in my browser that looks like the following: Proxy Error The proxy server received an invalid response from an upstream server. The proxy server could not handle the request /POST /tactic/admin/ http://192.168.14.113/tactic/admin/ / Reason: *Error reading from remote server This message tells you the TACTIC service has stopped. If you are running other processes on port 80 (for example, Skype), this can cause a problem with the TACTIC service. Stop the conflicting service. Then restart TACTIC in the TSI by logging in as root and running the command: service tactic start What if the TACTIC host memory is full? If the memory is full, restarting the TACTIC service will remove this memory. If the problem persists or occurs again, contact Southpaw. A memory leak can occasionally occur when a user is repeatedly viewing a very large table with a huge number of entries ( 5000). Restarting the service will clear this memory. What if the TACTIC host CPU is at 100%? Use the Windows Task Manager to kill the process that is taking 100% of the CPU. The TACTIC service will automatically recreate the process. Normally, this will clear the problem. What if the user sees a Proxy Error? This means that the IIS service cannot contact the TACTIC application server. Look in the Windows services and restart the TACTIC service. If the problem persists, contact Southpaw. Diagnostics This command line tool reveals active ports on the local machine. leowiz:~ root# netstat -a Active Internet connections (including servers) Proto Recv-Q Send-Q Local Address Foreign Address (state) tcp4 0 0 192.168.80.128.ssh 192.168.80.1.46575 ESTABLISHED tcp4 0 0 *.* *.* CLOSED tcp46 0 0 *.http *.* LISTEN tcp4 0 0 192.168.80.128.ssh 192.168.80.1.50126 ESTABLISHED tcp46 0 0 *.vnc-server *.* LISTEN tcp4 0 0 *.ssh *.* LISTEN tcp6 0 0 *.ssh *.* LISTEN tcp4 0 0 localhost.ipp *.* LISTEN tcp6 0 0 localhost.ipp *.* LISTEN udp4 0 0 *.net-assistant *.* udp4 0 0 192.168.80.128.ntp *.* udp6 0 0 localhost.ntp *.* udp4 0 0 localhost.ntp *.* udp6 0 0 localhost.ntp *.* udp6 0 0 *.ntp *.* udp4 0 0 *.ntp *.* udp6 0 0 *.mdns *.* udp4 0 0 *.mdns *.* Active LOCAL (UNIX) domain sockets Address Type Recv-Q Send-Q Inode Conn Refs Nextref Addr 41ad880 stream 0 0 46ad830 0 0 0 /private/tmp/ARD_ABJMMRT 41ce770 stream 0 0 0 3e22e58 0 0 /var/run/mDNSResponder 3e22e58 stream 0 0 0 41ce770 0 0 41ce5d8 stream 0 0 0 41ceb28 0 0 /var/tmp/SCDynamicStoreNotifyFileDescriptor-20739 41ceb28 stream 0 0 0 41ce5d8 0 0 41cef68 stream 0 0 0 3e22dd0 0 0 3e22dd0 stream 0 0 0 41cef68 0 0 3e22088 stream 0 0 0 41ad330 0 0 41ad330 stream 0 0 0 3e22088 0 0 41ce6e8 stream 0 0 0 41ce908 0 0 leowiz:~ root# This command line tool allows port-scanning of an IP address. It can be used to remotely determine if a host is running HTTP. [root@espresso ~]# nmap 192.168.80.128 Starting Nmap 4.76 ( http://nmap.org ) at 2010-03-23 15:58 EDT Interesting ports on 192.168.80.128: Not shown: 997 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 5900/tcp open vnc MAC Address: 00:0C:29:9D:E8:46 (VMware) Nmap done: 1 IP address (1 host up) scanned in 6.66 seconds [root@espresso ~]# In the above example, an http service seems to be running on the machine with the IP of 192.168.80.128 [root@tactic-tsi ~]# nmap localhost Starting Nmap 4.52 ( http://insecure.org ) at 2010-03-23 16:10 EDT Interesting ports on tactic-tsi.localdomain (127.0.0.1): Not shown: 1705 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 111/tcp open rpcbind 139/tcp open netbios-ssn 445/tcp open microsoft-ds 5432/tcp open postgres 8081/tcp open blackice-icecap 8082/tcp open blackice-alerts 10000/tcp open snet-sensor-mgmt Nmap done: 1 IP address (1 host up) scanned in 0.101 seconds [root@tactic-tsi ~]# In this example, TACTIC and Apache are running on the same local machine, with TACTIC taking up 2 processes, and 2 ports, 8081, and 8082","title":"Troubleshooting Tactic"},{"location":"troubleshooting-tactic/#tactic-service-troubleshooting","text":"","title":"TACTIC Service Troubleshooting"},{"location":"troubleshooting-tactic/#faq","text":"I get a proxy error in my browser that looks like the following: Proxy Error The proxy server received an invalid response from an upstream server. The proxy server could not handle the request /POST /tactic/admin/ http://192.168.14.113/tactic/admin/ / Reason: *Error reading from remote server This message tells you the TACTIC service has stopped. If you are running other processes on port 80 (for example, Skype), this can cause a problem with the TACTIC service. Stop the conflicting service. Then restart TACTIC in the TSI by logging in as root and running the command: service tactic start What if the TACTIC host memory is full? If the memory is full, restarting the TACTIC service will remove this memory. If the problem persists or occurs again, contact Southpaw. A memory leak can occasionally occur when a user is repeatedly viewing a very large table with a huge number of entries ( 5000). Restarting the service will clear this memory. What if the TACTIC host CPU is at 100%? Use the Windows Task Manager to kill the process that is taking 100% of the CPU. The TACTIC service will automatically recreate the process. Normally, this will clear the problem. What if the user sees a Proxy Error? This means that the IIS service cannot contact the TACTIC application server. Look in the Windows services and restart the TACTIC service. If the problem persists, contact Southpaw.","title":"FAQ"},{"location":"troubleshooting-tactic/#diagnostics","text":"This command line tool reveals active ports on the local machine. leowiz:~ root# netstat -a Active Internet connections (including servers) Proto Recv-Q Send-Q Local Address Foreign Address (state) tcp4 0 0 192.168.80.128.ssh 192.168.80.1.46575 ESTABLISHED tcp4 0 0 *.* *.* CLOSED tcp46 0 0 *.http *.* LISTEN tcp4 0 0 192.168.80.128.ssh 192.168.80.1.50126 ESTABLISHED tcp46 0 0 *.vnc-server *.* LISTEN tcp4 0 0 *.ssh *.* LISTEN tcp6 0 0 *.ssh *.* LISTEN tcp4 0 0 localhost.ipp *.* LISTEN tcp6 0 0 localhost.ipp *.* LISTEN udp4 0 0 *.net-assistant *.* udp4 0 0 192.168.80.128.ntp *.* udp6 0 0 localhost.ntp *.* udp4 0 0 localhost.ntp *.* udp6 0 0 localhost.ntp *.* udp6 0 0 *.ntp *.* udp4 0 0 *.ntp *.* udp6 0 0 *.mdns *.* udp4 0 0 *.mdns *.* Active LOCAL (UNIX) domain sockets Address Type Recv-Q Send-Q Inode Conn Refs Nextref Addr 41ad880 stream 0 0 46ad830 0 0 0 /private/tmp/ARD_ABJMMRT 41ce770 stream 0 0 0 3e22e58 0 0 /var/run/mDNSResponder 3e22e58 stream 0 0 0 41ce770 0 0 41ce5d8 stream 0 0 0 41ceb28 0 0 /var/tmp/SCDynamicStoreNotifyFileDescriptor-20739 41ceb28 stream 0 0 0 41ce5d8 0 0 41cef68 stream 0 0 0 3e22dd0 0 0 3e22dd0 stream 0 0 0 41cef68 0 0 3e22088 stream 0 0 0 41ad330 0 0 41ad330 stream 0 0 0 3e22088 0 0 41ce6e8 stream 0 0 0 41ce908 0 0 leowiz:~ root# This command line tool allows port-scanning of an IP address. It can be used to remotely determine if a host is running HTTP. [root@espresso ~]# nmap 192.168.80.128 Starting Nmap 4.76 ( http://nmap.org ) at 2010-03-23 15:58 EDT Interesting ports on 192.168.80.128: Not shown: 997 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 5900/tcp open vnc MAC Address: 00:0C:29:9D:E8:46 (VMware) Nmap done: 1 IP address (1 host up) scanned in 6.66 seconds [root@espresso ~]# In the above example, an http service seems to be running on the machine with the IP of 192.168.80.128 [root@tactic-tsi ~]# nmap localhost Starting Nmap 4.52 ( http://insecure.org ) at 2010-03-23 16:10 EDT Interesting ports on tactic-tsi.localdomain (127.0.0.1): Not shown: 1705 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 111/tcp open rpcbind 139/tcp open netbios-ssn 445/tcp open microsoft-ds 5432/tcp open postgres 8081/tcp open blackice-icecap 8082/tcp open blackice-alerts 10000/tcp open snet-sensor-mgmt Nmap done: 1 IP address (1 host up) scanned in 0.101 seconds [root@tactic-tsi ~]# In this example, TACTIC and Apache are running on the same local machine, with TACTIC taking up 2 processes, and 2 ports, 8081, and 8082","title":"Diagnostics"},{"location":"tsi-moving-data/","text":"Moving VM Data To transfer data from one VM to another, you need to do the following: In the old TSI VM shell: cd /home/apache pg_dumpall -U postgres -c tactic_database.sql In your host machine assuming windows, start a new window of Windows Explorer in the address, type in: \\\\ your old VM IP address when prompted for uid, password, type in : apache south123paw navigate into the apache folder, you should see the file tactic_database.sql , assets folder and projects folder You need to move the old VM\u2019s tactic_database.sql , assets folder and projects folder to the same location of the VM you just downloaded and installed. Same as above, open a new windows explorer, but type in the new VM IP address and carry out the copying In the new TACTIC VM shell, assuming you have copied the tactic_database.sql , assets folder and projects folder in the new IP from the VM, Type in: dropdb -U postgres sthpw psql -U postgres tactic_database.sql Upgrade the TACTIC database in the VM according to the version you are upgrading to Now you can just shut down the old VM by closing the VMware player window","title":"Moving VM Data"},{"location":"tsi-moving-data/#moving-vm-data","text":"To transfer data from one VM to another, you need to do the following: In the old TSI VM shell: cd /home/apache pg_dumpall -U postgres -c tactic_database.sql In your host machine assuming windows, start a new window of Windows Explorer in the address, type in: \\\\ your old VM IP address when prompted for uid, password, type in : apache south123paw navigate into the apache folder, you should see the file tactic_database.sql , assets folder and projects folder You need to move the old VM\u2019s tactic_database.sql , assets folder and projects folder to the same location of the VM you just downloaded and installed. Same as above, open a new windows explorer, but type in the new VM IP address and carry out the copying In the new TACTIC VM shell, assuming you have copied the tactic_database.sql , assets folder and projects folder in the new IP from the VM, Type in: dropdb -U postgres sthpw psql -U postgres tactic_database.sql Upgrade the TACTIC database in the VM according to the version you are upgrading to Now you can just shut down the old VM by closing the VMware player window","title":"Moving VM Data"},{"location":"tsi-setup-and-install/","text":"TACTIC VM Setup and Install The TACTIC VM is an evaluation of a TACTIC server environment on your own computer. The TACTIC VM is not intended for a production setting, and requires further configuration for large scale production use. See the Server Configuration section of the System Administrator documentation for configuration details. This document provides installation details using VirtualBox, however any virtual machine manager (ie. VMWare player) can be used. Download the VM from the community site downloads page . VirtualBox Setup Download and install VirtualBox. Import the TACTIC VM into VirtualBox using File Import Virtual Appliance Click Next, and review the VM information. Provide a name and storage location for your VM, then click Import. Configure Networking Select the newly imported VM from the list in the left sidebar, and click Settings. Open Network, and choose the network interfaces you want enabled. A network interface is necessary to access the application through browser. You can choose one or more of the following suggested interface settings below: NAT If it becomes necessary to isolate the VM on a host machine, then the NAT interface can be used to connect to the VM. Enable Advanced Port Forwarding with the following configuration: Internet and LAN connectivity can be utilized through the NAT interface if the host machine is connected to an external network such as the internet or a LAN. Allowing the VM to communicate with a LAN may require changes to the routing system on the LAN. If this is a requirement, then bridged networking may be the better option. NAT is a complete network that originates at the host machine, and is a self-contained router with DHCP services. The VM, once run, will usually ask the host machine for an IP address to assign to a network interface. The host machine can then connect to the VM interface through this IP. Bridged Adapter If there are machines other than the host machine that are required to connect to the VM, then the bridged connection should be used. The only requirement that bridged networking has is that there are appropriate services for the operation of the interface, such as DHCP on the host machines network. If these services do not exist, then the VM network interface needs to have manually set options. Host-Only Adapter To isolate the TSI completely, this option can be used. Host Only is a complete network that originates at the host machine, and is a self-contained router with DHCP services. The VM, once run, will usually ask the host machine for an IP address to assign to a network interface. The host machine can then connect to the VM interface through this IP. The VM is completely isolated from the host machines LAN. There is no network connectivity, therefore no LAN or internet will be available on the VM. Note Successful operation of a virtual machine may require some input from system administrators within a network environment. Start the VM using Start Retrieve your IP address to access the TACTIC application. If you use an NAT adapter, you can access TACTIC in browser using, localhost:8888 If you used a Bridged or Host-Only adapter, the IP will appear on the VirtualBox interface, Access TACTIC at your IP in browser. The server should return the TACTIC Login page, Continue your TACTIC exploration using the Quick Start documentation . Login Info There are two sets of login info to remember: VM Linux user user: root password: south123paw Samba share user: tactic password: south123paw To make your evaluation easier, the TSI uses passwords that are easy to guess and a Samba share. This could cause security issues, so your IT department must be aware of your use of the TSI.","title":"Setup And Install"},{"location":"tsi-setup-and-install/#tactic-vm-setup-and-install","text":"The TACTIC VM is an evaluation of a TACTIC server environment on your own computer. The TACTIC VM is not intended for a production setting, and requires further configuration for large scale production use. See the Server Configuration section of the System Administrator documentation for configuration details. This document provides installation details using VirtualBox, however any virtual machine manager (ie. VMWare player) can be used. Download the VM from the community site downloads page .","title":"TACTIC VM Setup and Install"},{"location":"tsi-setup-and-install/#virtualbox-setup","text":"Download and install VirtualBox. Import the TACTIC VM into VirtualBox using File Import Virtual Appliance Click Next, and review the VM information. Provide a name and storage location for your VM, then click Import. Configure Networking Select the newly imported VM from the list in the left sidebar, and click Settings. Open Network, and choose the network interfaces you want enabled. A network interface is necessary to access the application through browser. You can choose one or more of the following suggested interface settings below: NAT If it becomes necessary to isolate the VM on a host machine, then the NAT interface can be used to connect to the VM. Enable Advanced Port Forwarding with the following configuration: Internet and LAN connectivity can be utilized through the NAT interface if the host machine is connected to an external network such as the internet or a LAN. Allowing the VM to communicate with a LAN may require changes to the routing system on the LAN. If this is a requirement, then bridged networking may be the better option. NAT is a complete network that originates at the host machine, and is a self-contained router with DHCP services. The VM, once run, will usually ask the host machine for an IP address to assign to a network interface. The host machine can then connect to the VM interface through this IP. Bridged Adapter If there are machines other than the host machine that are required to connect to the VM, then the bridged connection should be used. The only requirement that bridged networking has is that there are appropriate services for the operation of the interface, such as DHCP on the host machines network. If these services do not exist, then the VM network interface needs to have manually set options. Host-Only Adapter To isolate the TSI completely, this option can be used. Host Only is a complete network that originates at the host machine, and is a self-contained router with DHCP services. The VM, once run, will usually ask the host machine for an IP address to assign to a network interface. The host machine can then connect to the VM interface through this IP. The VM is completely isolated from the host machines LAN. There is no network connectivity, therefore no LAN or internet will be available on the VM. Note Successful operation of a virtual machine may require some input from system administrators within a network environment. Start the VM using Start Retrieve your IP address to access the TACTIC application. If you use an NAT adapter, you can access TACTIC in browser using, localhost:8888 If you used a Bridged or Host-Only adapter, the IP will appear on the VirtualBox interface, Access TACTIC at your IP in browser. The server should return the TACTIC Login page, Continue your TACTIC exploration using the Quick Start documentation .","title":"VirtualBox Setup"},{"location":"tsi-setup-and-install/#login-info","text":"There are two sets of login info to remember: VM Linux user user: root password: south123paw Samba share user: tactic password: south123paw To make your evaluation easier, the TSI uses passwords that are easy to guess and a Samba share. This could cause security issues, so your IT department must be aware of your use of the TSI.","title":"Login Info"},{"location":"tsi-troubleshooting/","text":"TACTIC VM Troubleshooting The IP address does not show up when I start up the VM. It is possible that an IP address was not assigned because your host machine is not connected to a network. Or, you have a special network configuration that may require one of the following settings: Network with DHCP: bridged Network without DHCP: NAT No network: host-only Changing Windows Special Network Configurations In the top right corner of your VMware player, click on the down arrow beside the Ethernet button and choose host-only , NAT , or bridged . Make sure the Connected menu item is checked. Changing Linux Special Network Configurations In the top right corner of your VMware player, right-click on the Ethernet button and choose host-only , NAT , or bridged . Make sure the Connected menu item is checked. If the problem persists, refer to the VMware Player documentation by pressing F1. I do not remember the IP address of the VMware virtual machine. In the VMware player, run the following command in the shell: ifconfig The IP is the internet address; for example, \"192.168.14.101.\" Refreshing the IP Address If you change the Ethernet settings, you may need to restart the network card in the VM. First, you will need to know its number: run the command ifconfig in the VM shell. You should see a name similar to \"ethX\", where X is the arbitrary number of the interface. To restart \"ethX\", run the following commands: ifdown ethX ifup ethX I get a proxy error in my browser that looks like the following: Proxy Error The proxy server received an invalid response from an upstream server. The proxy server could not handle the request /POST /tactic/admin/ http://192.168.14.113/tactic/admin/ / Reason: *Error reading from remote server This message tells you the TACTIC service has stopped. If you are running other processes on port 80 (for example, Skype), this can cause a problem with the TACTIC service. Stop the conflicting service. Then restart TACTIC in the VM by logging in as root and running the command: service tactic start","title":"Troubleshooting"},{"location":"tsi-troubleshooting/#tactic-vm-troubleshooting","text":"The IP address does not show up when I start up the VM. It is possible that an IP address was not assigned because your host machine is not connected to a network. Or, you have a special network configuration that may require one of the following settings: Network with DHCP: bridged Network without DHCP: NAT No network: host-only Changing Windows Special Network Configurations In the top right corner of your VMware player, click on the down arrow beside the Ethernet button and choose host-only , NAT , or bridged . Make sure the Connected menu item is checked. Changing Linux Special Network Configurations In the top right corner of your VMware player, right-click on the Ethernet button and choose host-only , NAT , or bridged . Make sure the Connected menu item is checked. If the problem persists, refer to the VMware Player documentation by pressing F1. I do not remember the IP address of the VMware virtual machine. In the VMware player, run the following command in the shell: ifconfig The IP is the internet address; for example, \"192.168.14.101.\" Refreshing the IP Address If you change the Ethernet settings, you may need to restart the network card in the VM. First, you will need to know its number: run the command ifconfig in the VM shell. You should see a name similar to \"ethX\", where X is the arbitrary number of the interface. To restart \"ethX\", run the following commands: ifdown ethX ifup ethX I get a proxy error in my browser that looks like the following: Proxy Error The proxy server received an invalid response from an upstream server. The proxy server could not handle the request /POST /tactic/admin/ http://192.168.14.113/tactic/admin/ / Reason: *Error reading from remote server This message tells you the TACTIC service has stopped. If you are running other processes on port 80 (for example, Skype), this can cause a problem with the TACTIC service. Stop the conflicting service. Then restart TACTIC in the VM by logging in as root and running the command: service tactic start","title":"TACTIC VM Troubleshooting"},{"location":"upgrade-crypto/","text":"PyCryptodome Update If your TACTIC installation uses PyCrypto, we reccomend upgrading to PyCryptodome. PyCrypto has been flagged as insecure by the Python Community. Support for PyCryptodome has been added in latest 4.7. You will need Install PyCryptodome Update the TACTIC License File pip Install If you are you using pip to install, run Python 3: python3 -m pip install pycryptodomex Python 2: python -m pip install pycryptodomex dnf Install If you are using to install, run: yum install python3-pycryptodomex Update the TACTIC License Once you've installed pycryptodome, you will see warnings in your server logs related to the TACTIC license functionality. These should not cause errors, but can you resolve these warnings by replacing the license file, usually found on Linux in, /opt/tactic/tactic_data/config/tactic-license.xml and on Windows in, C:\\ProgramData\\Southpaw\\Tactic\\config\\tactic-license.xml with the updated license file found in, TACTIC/src/install/start/config/tactic-license.xml","title":"PyCryptodome Update"},{"location":"upgrade-crypto/#pycryptodome-update","text":"If your TACTIC installation uses PyCrypto, we reccomend upgrading to PyCryptodome. PyCrypto has been flagged as insecure by the Python Community. Support for PyCryptodome has been added in latest 4.7. You will need Install PyCryptodome Update the TACTIC License File","title":"PyCryptodome Update"},{"location":"upgrade-crypto/#pip-install","text":"If you are you using pip to install, run Python 3: python3 -m pip install pycryptodomex Python 2: python -m pip install pycryptodomex","title":"pip Install"},{"location":"upgrade-crypto/#dnf-install","text":"If you are using to install, run: yum install python3-pycryptodomex","title":"dnf Install"},{"location":"upgrade-crypto/#update-the-tactic-license","text":"Once you've installed pycryptodome, you will see warnings in your server logs related to the TACTIC license functionality. These should not cause errors, but can you resolve these warnings by replacing the license file, usually found on Linux in, /opt/tactic/tactic_data/config/tactic-license.xml and on Windows in, C:\\ProgramData\\Southpaw\\Tactic\\config\\tactic-license.xml with the updated license file found in, TACTIC/src/install/start/config/tactic-license.xml","title":"Update the TACTIC License"},{"location":"upgrade-python/","text":"Upgrade TACTIC to Python 3 If you have an existing server running Python 2, it is easy to upgrade to Python 3. TACTIC 4.7 is compatible with both Python 2 and Python 3. Note: If you are installing pycryptodomex in Python 3, and do not have this module running in Python 2, see Upgrade TACTIC Pycryptdome Update to upgrade from Pycrypto to Pycryptodome. General Upgrade The following steps must be taken to upgrade your TACTIC server, Install Python 3 Upgrade __init__.py in Python 2 site-packages/tacticenv with latest 4.7 file /src/install/data/ _init _.py Copy site-packages/tacticenv from Python 2 site-packages to Python 3 site-packages Install Python 3 Modules, pillow pycryptodomex lxml requests pytz Update your TACTIC config file to use Python 3 for all services by updating the python directive: services ... python python3 /python ... /services See Server Configuration Configuration Checklist for the location of your TACTIC configuration file. Update the TACTIC service. For Windows, see Windows section below. For linux, copy the Python 3 service file from, /src/install/service/tactic_python3 into, /etc/init.d Enable the service with commands, chkconfig --add tactic_python3 chkconfig --level 235 tactic_python3 on Remove all *.pyc files from your TACTIC source code. Mako and some other packages have been moved into the 3rd_party sources directory. RHEL Upgrade Install python3 dnf install python 3 Replace /lib/python2.7/site-packages/tacticenv/ _init _.py with latest 4.7 file /src/install/data/ _init _.py Copy /lib/python2.7/site-packages/tacticenv into /lib/python3.7/site-packages Install updated Python 3 modules using dnf or pip, pillow pycryptodomex lxml requests pytz DB connectivity module: ie. psycopg2, mysqlclient, etc. Using dnf, dnf install python3-pillow Using pip, python3 -m pip install pycryptodomex Update your TACTIC config file to use Python 3 for all services by updating tag: services ... python python3 /python ... /services Update the TACTIC service. For Windows, see Windows section below. For linux, copy the Python 3 service file from, /src/install/service/tactic_python3 into, /etc/init.d Enable the service with commands, chkconfig --add tactic_python3 chkconfig --level 235 tactic_python3 on Remove all *.pyc files from your TACTIC source code. Mako and some other packages have been moved into the 3rd_party sources directory. Windows Install python3 Replace C:\\Python27\\Lib\\site-packages\\tacticenv__init__.py with latest 4.7 file \\src\\install\\data__init__.py Copy C:\\Python27\\Lib\\site-packages\\tacticenv into C:\\Python37\\Lib\\site-packages Install updated Python 3 modules: pillow lxml pycryptodomex requests jaraco.windows pytz pywin32 DB connectivity module - ie. psycopg2, mysqlclient We reccomend using pip to install updated packages. python3 -m pip install pycryptodomex Update your TACTIC config file to use Python 3 for all services by updating tag: services ... python python3 /python ... /services Upgrade the Windows TACTIC service. i. Install Windows service Python 3 module: python -m pip install pywin32 ii. Remove the service originally installed under Python 2, python TACTIC/src/install/service/win32_service.py remove iii. Install the service under Python 3, python3 TACTIC/src/install/service/win32_service.py install Note: Since last tested (Sept 2019), we had issues running Python 3 Windows Services. The workaround required us to copy dll files from, C:\\Python37\\Lib\\site-packages\\pywin32_system32 to C:\\Python37\\Lib\\site-packages\\win32 The TACTIC service should run after this. If this does not solve service issues, try running TACTIC in debug mode: python3 src/install/service/win32_service.py debug We recommend removing all *.pyc files from your TACTIC source code since we have moved and updated certain packages into TACTIC/3rd_party/","title":"Upgrade to Python 3"},{"location":"upgrade-python/#upgrade-tactic-to-python-3","text":"If you have an existing server running Python 2, it is easy to upgrade to Python 3. TACTIC 4.7 is compatible with both Python 2 and Python 3. Note: If you are installing pycryptodomex in Python 3, and do not have this module running in Python 2, see Upgrade TACTIC Pycryptdome Update to upgrade from Pycrypto to Pycryptodome.","title":"Upgrade TACTIC to Python 3"},{"location":"upgrade-python/#general-upgrade","text":"The following steps must be taken to upgrade your TACTIC server, Install Python 3 Upgrade __init__.py in Python 2 site-packages/tacticenv with latest 4.7 file /src/install/data/ _init _.py Copy site-packages/tacticenv from Python 2 site-packages to Python 3 site-packages Install Python 3 Modules, pillow pycryptodomex lxml requests pytz Update your TACTIC config file to use Python 3 for all services by updating the python directive: services ... python python3 /python ... /services See Server Configuration Configuration Checklist for the location of your TACTIC configuration file. Update the TACTIC service. For Windows, see Windows section below. For linux, copy the Python 3 service file from, /src/install/service/tactic_python3 into, /etc/init.d Enable the service with commands, chkconfig --add tactic_python3 chkconfig --level 235 tactic_python3 on Remove all *.pyc files from your TACTIC source code. Mako and some other packages have been moved into the 3rd_party sources directory.","title":"General Upgrade"},{"location":"upgrade-python/#rhel-upgrade","text":"Install python3 dnf install python 3 Replace /lib/python2.7/site-packages/tacticenv/ _init _.py with latest 4.7 file /src/install/data/ _init _.py Copy /lib/python2.7/site-packages/tacticenv into /lib/python3.7/site-packages Install updated Python 3 modules using dnf or pip, pillow pycryptodomex lxml requests pytz DB connectivity module: ie. psycopg2, mysqlclient, etc. Using dnf, dnf install python3-pillow Using pip, python3 -m pip install pycryptodomex Update your TACTIC config file to use Python 3 for all services by updating tag: services ... python python3 /python ... /services Update the TACTIC service. For Windows, see Windows section below. For linux, copy the Python 3 service file from, /src/install/service/tactic_python3 into, /etc/init.d Enable the service with commands, chkconfig --add tactic_python3 chkconfig --level 235 tactic_python3 on Remove all *.pyc files from your TACTIC source code. Mako and some other packages have been moved into the 3rd_party sources directory.","title":"RHEL Upgrade"},{"location":"upgrade-python/#windows","text":"Install python3 Replace C:\\Python27\\Lib\\site-packages\\tacticenv__init__.py with latest 4.7 file \\src\\install\\data__init__.py Copy C:\\Python27\\Lib\\site-packages\\tacticenv into C:\\Python37\\Lib\\site-packages Install updated Python 3 modules: pillow lxml pycryptodomex requests jaraco.windows pytz pywin32 DB connectivity module - ie. psycopg2, mysqlclient We reccomend using pip to install updated packages. python3 -m pip install pycryptodomex Update your TACTIC config file to use Python 3 for all services by updating tag: services ... python python3 /python ... /services Upgrade the Windows TACTIC service. i. Install Windows service Python 3 module: python -m pip install pywin32 ii. Remove the service originally installed under Python 2, python TACTIC/src/install/service/win32_service.py remove iii. Install the service under Python 3, python3 TACTIC/src/install/service/win32_service.py install Note: Since last tested (Sept 2019), we had issues running Python 3 Windows Services. The workaround required us to copy dll files from, C:\\Python37\\Lib\\site-packages\\pywin32_system32 to C:\\Python37\\Lib\\site-packages\\win32 The TACTIC service should run after this. If this does not solve service issues, try running TACTIC in debug mode: python3 src/install/service/win32_service.py debug We recommend removing all *.pyc files from your TACTIC source code since we have moved and updated certain packages into TACTIC/3rd_party/","title":"Windows"},{"location":"upgrade-tactic/","text":"Upgrade TACTIC Upgrading TACTIC version is a simple precedure and generally involves the following steps, Stop the TACTIC service Backup the database Update source code Run upgrade_db.py Restart the TACTIC service Linux Upgrade Download the new release of TACTIC from the Download section of support.southpawtech.com . TACTIC is delivered as a zipped (.zip) file. Copy the new version to the installed directory of TACTIC and unpack it. e.g. cd /home/apache/ unzip tactic-2.6.0.v01.zip Stop the TACTIC service /etc/init.d/tactic stop Switch the symbolic link. See explanation on symbolic link below. In a cmd shell, cd to the bin directory of the new installation: cd /home/apache/tactic/src/bin Back up the current database: pg_dumpall -U postgres -c database_ date .sql Run the upgrade script. The version number argument (for example, 2.6.0.v01) is optional. python3 upgrade_db.py First, you will be prompted to confirm whether the displayed version is the right one to upgrade to. On proceeding, it will check the upgrade script\u2019s version tree against the currently installed TACTIC version (the new one). Normally, they should be the same. In case they are not, you will be prompted again to confirm if this is actually intended. Warning: If the versions do not match, it is very likely you have not stopped the old version from running or have not symlinked \"tactic\" to the new version yet. Restart the TACTIC service: /etc/init.d/tactic start Go to the \"Projects\" view in the Admin site. Optional: Compare each project\u2019s schema with the one used by TACTIC. Explanation of switching symbolic links By default, in your python installation, like /usr/lib/python2.5/site-packages/tacticenv/tactic\\_paths.py it defines, TACTIC\\_INSTALL\\_DIR = '/home/apache/tactic' A convenient way to upgrade is to untar the new release in, /home/apache/tactic-2.5.0.rc04 then delete any existing symbolic link named \"tactic\", cd /home/apache rm tactic Afterwards, you can create a new symlink using ln -s tactic-2.5.0.rc04 tactic With the tactic service stopped, and the TACTIC_INSTALL_DIR practically pointing to the new release because of the symlink, now you can safely run python3 src/bin/upgrade\\_db.py in the new release. Windows Upgrade Download the new release of TACTIC from the Download section of support.southpawtech.com . TACTIC is delivered as a zipped (.zip) file. Copy the new version to the installed directory of TACTIC and unzip it. Stop the TACTIC service from the services panel. Rename the top directory of the new version to TACTIC. In a cmd shell, cd to the bin directory of the new installation: cd C:\\Program Files\\Southpaw\\Tactic\\src\\bin Back up the current database: pg_dumpall -U postgres -c database_ date .sql Run the upgrade script. The version number argument (for example, 2.6.0.v01) is optional. python3 upgrade_db.py First, you will be prompted to confirm whether the displayed version is the right one to upgrade to. On proceeding, it will check the upgrade script\u2019s version tree against the currently installed TACTIC version (the new one). Normally, they should be the same. In case they are not, you will be prompted again to confirm if this is actually intended. Warning: if the versions do not match, it is very likely you have not stopped the old version from running or have not symlinked \"tactic\" to the new version yet. Restart the TACTIC service from the services panel. Go to the \"Projects\" view in the Admin site. Optional: Compare each project\u2019s schema with the one used by TACTIC.","title":"Upgrade Tactic"},{"location":"upgrade-tactic/#upgrade-tactic","text":"Upgrading TACTIC version is a simple precedure and generally involves the following steps, Stop the TACTIC service Backup the database Update source code Run upgrade_db.py Restart the TACTIC service","title":"Upgrade TACTIC"},{"location":"upgrade-tactic/#linux-upgrade","text":"Download the new release of TACTIC from the Download section of support.southpawtech.com . TACTIC is delivered as a zipped (.zip) file. Copy the new version to the installed directory of TACTIC and unpack it. e.g. cd /home/apache/ unzip tactic-2.6.0.v01.zip Stop the TACTIC service /etc/init.d/tactic stop Switch the symbolic link. See explanation on symbolic link below. In a cmd shell, cd to the bin directory of the new installation: cd /home/apache/tactic/src/bin Back up the current database: pg_dumpall -U postgres -c database_ date .sql Run the upgrade script. The version number argument (for example, 2.6.0.v01) is optional. python3 upgrade_db.py First, you will be prompted to confirm whether the displayed version is the right one to upgrade to. On proceeding, it will check the upgrade script\u2019s version tree against the currently installed TACTIC version (the new one). Normally, they should be the same. In case they are not, you will be prompted again to confirm if this is actually intended. Warning: If the versions do not match, it is very likely you have not stopped the old version from running or have not symlinked \"tactic\" to the new version yet. Restart the TACTIC service: /etc/init.d/tactic start Go to the \"Projects\" view in the Admin site. Optional: Compare each project\u2019s schema with the one used by TACTIC. Explanation of switching symbolic links By default, in your python installation, like /usr/lib/python2.5/site-packages/tacticenv/tactic\\_paths.py it defines, TACTIC\\_INSTALL\\_DIR = '/home/apache/tactic' A convenient way to upgrade is to untar the new release in, /home/apache/tactic-2.5.0.rc04 then delete any existing symbolic link named \"tactic\", cd /home/apache rm tactic Afterwards, you can create a new symlink using ln -s tactic-2.5.0.rc04 tactic With the tactic service stopped, and the TACTIC_INSTALL_DIR practically pointing to the new release because of the symlink, now you can safely run python3 src/bin/upgrade\\_db.py in the new release.","title":"Linux Upgrade"},{"location":"upgrade-tactic/#windows-upgrade","text":"Download the new release of TACTIC from the Download section of support.southpawtech.com . TACTIC is delivered as a zipped (.zip) file. Copy the new version to the installed directory of TACTIC and unzip it. Stop the TACTIC service from the services panel. Rename the top directory of the new version to TACTIC. In a cmd shell, cd to the bin directory of the new installation: cd C:\\Program Files\\Southpaw\\Tactic\\src\\bin Back up the current database: pg_dumpall -U postgres -c database_ date .sql Run the upgrade script. The version number argument (for example, 2.6.0.v01) is optional. python3 upgrade_db.py First, you will be prompted to confirm whether the displayed version is the right one to upgrade to. On proceeding, it will check the upgrade script\u2019s version tree against the currently installed TACTIC version (the new one). Normally, they should be the same. In case they are not, you will be prompted again to confirm if this is actually intended. Warning: if the versions do not match, it is very likely you have not stopped the old version from running or have not symlinked \"tactic\" to the new version yet. Restart the TACTIC service from the services panel. Go to the \"Projects\" view in the Admin site. Optional: Compare each project\u2019s schema with the one used by TACTIC.","title":"Windows Upgrade"}]}